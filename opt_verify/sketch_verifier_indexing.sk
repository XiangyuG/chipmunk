int original_sketch(int x0, int x1,\
                    int mux_ctrl0, int mux_ctrl1) {
  int op0 = 0;
  if (mux_ctrl0 == 0) {
    op0 = x0;
  } else {
    assert(mux_ctrl0 == 1);
    op0 = x1;
  }

  int op1 = 0;
  if (mux_ctrl1 == 0) {
    op1 = x0;
  } else {
    assert(mux_ctrl1 == 1);
    op1 = x1;
  }

  return op0 + op1;
}

harness void fwd(int x0, int x1,\
                  int mux_ctrl0_original, int mux_ctrl1_original,\
                  int mux_ctrl0_opt, int mux_ctrl1_opt) {
  // Capture ranges of input holes as assume statements
  assume(mux_ctrl0_original < 2);
  assume(mux_ctrl1_original < 2);

  // Add assumes on sketch 1's holes
  // Nothing to add here.

  // Canonicalization transform from sketch 1 to sketch 2
  if (mux_ctrl0_original < mux_ctrl1_original) {
    mux_ctrl0_opt = mux_ctrl0_original;
    mux_ctrl1_opt = mux_ctrl1_original;
  } else {
    mux_ctrl0_opt = mux_ctrl1_original;
    mux_ctrl1_opt = mux_ctrl0_original;
  }

  // Check that sketches are equivalent
  assert(original_sketch(x0, x1, mux_ctrl0_original, mux_ctrl1_original) == \
         original_sketch(x0, x1, mux_ctrl0_opt, mux_ctrl1_opt));

  // Check ranges of output holes as assert statements.
  assert(mux_ctrl0_opt < 2);
  assert(mux_ctrl1_opt < 2);

  // Check conditions on output holes (will be used in the
  // synthesizer running on the second sketch).
  assert(mux_ctrl0_opt <= mux_ctrl1_opt);
}

harness void bwd(int x0, int x1,\
                  int mux_ctrl0_original, int mux_ctrl1_original,\
                  int mux_ctrl0_opt, int mux_ctrl1_opt) {
  // Capture ranges of input holes as assume statements
  assume(mux_ctrl0_opt < 2);
  assume(mux_ctrl1_opt < 2);

  // Add assumes on sketch 1's holes
  assume(mux_ctrl0_opt <= mux_ctrl1_opt);

  // Inverse canonicalization transform from sketch 1 to sketch 2
  // Note: this inverse transform isn't unique.
  mux_ctrl0_original = mux_ctrl1_opt;
  mux_ctrl1_original = mux_ctrl0_opt;

  // Check that sketches are equivalent
  assert(original_sketch(x0, x1, mux_ctrl0_original, mux_ctrl1_original) == \
         original_sketch(x0, x1, mux_ctrl0_opt, mux_ctrl1_opt));

  // Check ranges of output holes as assert statements.
  assert(mux_ctrl0_original < 2);
  assert(mux_ctrl1_original < 2);

  // Check conditions on output holes (will be used in the
  // synthesizer running on the second sketch).
  // Nothing here.
}
