generator int constant() {
  return ??(2);
}

generator int simple_alu(int x, int y) {
  int opcode = ??(2);
  if (opcode == 0) {
    return x + y;
  } else if (opcode == 1) {
    return x * y;
  } else if (opcode == 2) {
    return x - y;
  } else {
    assert(opcode == 3);
    return x / y;
  }
}

generator int mux4(int a, int b, int c, int d) {
  int opcode = ??(2);
  if (opcode == 0) {
    return a;
  } else if (opcode == 1) {
    return b;
  } else if (opcode == 2) {
    return c;
  } else {
    assert(opcode == 3);
    return d;
  }
}

generator int mux6(int a, int b, int c, int d, int e, int f) {
  int opcode = ??(3);
  if (opcode == 0) {
    return a;
  } else if (opcode == 1) {
    return b;
  } else if (opcode == 2) {
    return c;
  } else if (opcode == 3) {
    return d;
  } else if (opcode == 4) {
    return e;
  } else if (opcode == 5) {
    return f;
  } else {
    assert(false);
  }
}

harness void main(int x, int y, int z, int w) {
  assume(x != 0);
  assume(y != 0);
  assume(z != 0);
  assume(w != 0);

  // Assign packet fields to first stage inputs.
  // TODO: This is hardcoded for now, we can make this programmable.
  int input11 = x;
  int input12 = y;
  int input13 = z;
  int input14 = w;
  int input15 = 0;

  //*********** Stage 1 ***********//
  // Get operands from input packet headers
  int operand11     = mux6(input11, input12, input13, input14, input15, constant());
  int operand12     = mux6(input11, input12, input13, input14, input15, constant());
  int operand13     = mux6(input11, input12, input13, input14, input15, constant());
  int operand14     = mux6(input11, input12, input13, input14, input15, constant());
  int operand15     = mux6(input11, input12, input13, input14, input15, constant());
  int operand16     = mux6(input11, input12, input13, input14, input15, constant());
  int operand17     = mux6(input11, input12, input13, input14, input15, constant());
  int operand18     = mux6(input11, input12, input13, input14, input15, constant());

  // Run simple ALUs
  int destination11 = simple_alu(operand11, operand12);
  int destination12 = simple_alu(operand13, operand14);
  int destination13 = simple_alu(operand15, operand16);
  int destination14 = simple_alu(operand17, operand18);

  // Write outputs
  int output11 = mux4(destination11, destination12, destination13, destination14);
  int output12 = mux4(destination11, destination12, destination13, destination14);
  int output13 = mux4(destination11, destination12, destination13, destination14);
  int output14 = mux4(destination11, destination12, destination13, destination14);
  int output15 = mux4(destination11, destination12, destination13, destination14);

  // Stage 2: to be written TODO
  assert(x / y == output11);
  assert(x - y == output12);
  assert(x + w == output13);
  assert(z * 3 == output14);
}
