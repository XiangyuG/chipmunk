generator int simple_alu(int x, int y) {
  int opcode = ??(2);
  if (opcode == 0) {
    return x + y;
  } else if (opcode == 1) {
    return x * y;
  } else if (opcode == 2) {
    return x - y;
  } else {
    assert(opcode == 3);
    return x / y;
  }
}

generator int mux(int a, int b, int c, int d) {
  int opcode = ??(2);
  if (opcode == 0) {
    return a;
  } else if (opcode == 1) {
    return b;
  } else if (opcode == 3) {
    return c;
  } else {
    assert(opcode == 4);
    return d;
  }
}

harness void main(int x, int y, int z, int w) {
  assume (z != 0);

  // Stage 1
  // Get input operands
  int op11     = mux(x, y, z, w);
  int op12     = mux(x, y, z, w);
  int op13     = mux(x, y, z, w);
  int op14     = mux(x, y, z, w);

  // Run simple ALUs
  int result11 = simple_alu(op11, op12);
  int result12 = simple_alu(op11, op12);

  // Write outputs
  int x = mux(result11, result12, x, 0);
  int y = mux(result11, result12, y.o                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

  int result  = simple_alu(mux(x, y, z, w), mux(x, y, z, w));
  int result2 = simple_alu(mux(x, y, z, w), mux(x, y, z, w));

  // Stage 2
  int result3 = simple_alu(mux(result, result2, 0, 0), mux(result, result2, 0, 0));
  assert(x / z + x*y == result3);
}
