// This is an autogenerated sketch file corresponding to
// the router's data path and is used to solve the Chipmunk compilation problem.
// program_file = example_specs/simple.sk num_pipeline_stages = 5
// num_alus_per_stage = 5
// num_phv_containers = 5

int sample1_stateless_alu_0_0_mux1_ctrl= ??(3);
int sample1_stateless_alu_0_0_mux2_ctrl= ??(3);
int sample1_stateless_alu_0_0_opcode= ??(5);
int sample1_stateless_alu_0_0_immediate= ??(2);
int sample1_stateless_alu_0_1_mux1_ctrl= ??(3);
int sample1_stateless_alu_0_1_mux2_ctrl= ??(3);
int sample1_stateless_alu_0_1_opcode= ??(5);
int sample1_stateless_alu_0_1_immediate= ??(2);
int sample1_stateless_alu_0_2_mux1_ctrl= ??(3);
int sample1_stateless_alu_0_2_mux2_ctrl= ??(3);
int sample1_stateless_alu_0_2_opcode= ??(5);
int sample1_stateless_alu_0_2_immediate= ??(2);
int sample1_stateless_alu_0_3_mux1_ctrl= ??(3);
int sample1_stateless_alu_0_3_mux2_ctrl= ??(3);
int sample1_stateless_alu_0_3_opcode= ??(5);
int sample1_stateless_alu_0_3_immediate= ??(2);
int sample1_stateless_alu_0_4_mux1_ctrl= ??(3);
int sample1_stateless_alu_0_4_mux2_ctrl= ??(3);
int sample1_stateless_alu_0_4_opcode= ??(5);
int sample1_stateless_alu_0_4_immediate= ??(2);
int sample1_stateful_alu_0_0_Mux3_0_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_10_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_11_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_12_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_13_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_14_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_15_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_16_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_17_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_18_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_19_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_1_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_20_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_21_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_22_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_23_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_24_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_25_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_26_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_27_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_2_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_3_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_4_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_5_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_6_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_7_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_8_global= ??(2);
int sample1_stateful_alu_0_0_Mux3_9_global= ??(2);
int sample1_stateful_alu_0_0_Opt_0_global= ??(1);
int sample1_stateful_alu_0_0_Opt_1_global= ??(1);
int sample1_stateful_alu_0_0_Opt_2_global= ??(1);
int sample1_stateful_alu_0_0_Opt_3_global= ??(1);
int sample1_stateful_alu_0_0_Opt_4_global= ??(1);
int sample1_stateful_alu_0_0_Opt_5_global= ??(1);
int sample1_stateful_alu_0_0_Opt_6_global= ??(1);
int sample1_stateful_alu_0_0_Opt_7_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_0_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_1_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_2_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_3_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_4_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_5_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_6_global= ??(1);
int sample1_stateful_alu_0_0_arith_op_7_global= ??(1);
int sample1_stateful_alu_0_0_const_0_global= ??(2);
int sample1_stateful_alu_0_0_const_10_global= ??(2);
int sample1_stateful_alu_0_0_const_11_global= ??(2);
int sample1_stateful_alu_0_0_const_12_global= ??(2);
int sample1_stateful_alu_0_0_const_13_global= ??(2);
int sample1_stateful_alu_0_0_const_14_global= ??(2);
int sample1_stateful_alu_0_0_const_15_global= ??(2);
int sample1_stateful_alu_0_0_const_16_global= ??(2);
int sample1_stateful_alu_0_0_const_17_global= ??(2);
int sample1_stateful_alu_0_0_const_18_global= ??(2);
int sample1_stateful_alu_0_0_const_19_global= ??(2);
int sample1_stateful_alu_0_0_const_1_global= ??(2);
int sample1_stateful_alu_0_0_const_2_global= ??(2);
int sample1_stateful_alu_0_0_const_3_global= ??(2);
int sample1_stateful_alu_0_0_const_4_global= ??(2);
int sample1_stateful_alu_0_0_const_5_global= ??(2);
int sample1_stateful_alu_0_0_const_6_global= ??(2);
int sample1_stateful_alu_0_0_const_7_global= ??(2);
int sample1_stateful_alu_0_0_const_8_global= ??(2);
int sample1_stateful_alu_0_0_const_9_global= ??(2);
int sample1_stateful_alu_0_0_rel_op_0_global= ??(2);
int sample1_stateful_alu_0_0_rel_op_1_global= ??(2);
int sample1_stateful_alu_0_0_rel_op_2_global= ??(2);
int sample1_stateful_alu_0_0_rel_op_3_global= ??(2);
int sample1_stateless_alu_1_0_mux1_ctrl= ??(3);
int sample1_stateless_alu_1_0_mux2_ctrl= ??(3);
int sample1_stateless_alu_1_0_opcode= ??(5);
int sample1_stateless_alu_1_0_immediate= ??(2);
int sample1_stateless_alu_1_1_mux1_ctrl= ??(3);
int sample1_stateless_alu_1_1_mux2_ctrl= ??(3);
int sample1_stateless_alu_1_1_opcode= ??(5);
int sample1_stateless_alu_1_1_immediate= ??(2);
int sample1_stateless_alu_1_2_mux1_ctrl= ??(3);
int sample1_stateless_alu_1_2_mux2_ctrl= ??(3);
int sample1_stateless_alu_1_2_opcode= ??(5);
int sample1_stateless_alu_1_2_immediate= ??(2);
int sample1_stateless_alu_1_3_mux1_ctrl= ??(3);
int sample1_stateless_alu_1_3_mux2_ctrl= ??(3);
int sample1_stateless_alu_1_3_opcode= ??(5);
int sample1_stateless_alu_1_3_immediate= ??(2);
int sample1_stateless_alu_1_4_mux1_ctrl= ??(3);
int sample1_stateless_alu_1_4_mux2_ctrl= ??(3);
int sample1_stateless_alu_1_4_opcode= ??(5);
int sample1_stateless_alu_1_4_immediate= ??(2);
int sample1_stateful_alu_1_0_Mux3_0_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_10_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_11_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_12_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_13_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_14_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_15_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_16_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_17_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_18_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_19_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_1_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_20_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_21_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_22_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_23_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_24_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_25_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_26_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_27_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_2_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_3_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_4_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_5_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_6_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_7_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_8_global= ??(2);
int sample1_stateful_alu_1_0_Mux3_9_global= ??(2);
int sample1_stateful_alu_1_0_Opt_0_global= ??(1);
int sample1_stateful_alu_1_0_Opt_1_global= ??(1);
int sample1_stateful_alu_1_0_Opt_2_global= ??(1);
int sample1_stateful_alu_1_0_Opt_3_global= ??(1);
int sample1_stateful_alu_1_0_Opt_4_global= ??(1);
int sample1_stateful_alu_1_0_Opt_5_global= ??(1);
int sample1_stateful_alu_1_0_Opt_6_global= ??(1);
int sample1_stateful_alu_1_0_Opt_7_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_0_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_1_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_2_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_3_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_4_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_5_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_6_global= ??(1);
int sample1_stateful_alu_1_0_arith_op_7_global= ??(1);
int sample1_stateful_alu_1_0_const_0_global= ??(2);
int sample1_stateful_alu_1_0_const_10_global= ??(2);
int sample1_stateful_alu_1_0_const_11_global= ??(2);
int sample1_stateful_alu_1_0_const_12_global= ??(2);
int sample1_stateful_alu_1_0_const_13_global= ??(2);
int sample1_stateful_alu_1_0_const_14_global= ??(2);
int sample1_stateful_alu_1_0_const_15_global= ??(2);
int sample1_stateful_alu_1_0_const_16_global= ??(2);
int sample1_stateful_alu_1_0_const_17_global= ??(2);
int sample1_stateful_alu_1_0_const_18_global= ??(2);
int sample1_stateful_alu_1_0_const_19_global= ??(2);
int sample1_stateful_alu_1_0_const_1_global= ??(2);
int sample1_stateful_alu_1_0_const_2_global= ??(2);
int sample1_stateful_alu_1_0_const_3_global= ??(2);
int sample1_stateful_alu_1_0_const_4_global= ??(2);
int sample1_stateful_alu_1_0_const_5_global= ??(2);
int sample1_stateful_alu_1_0_const_6_global= ??(2);
int sample1_stateful_alu_1_0_const_7_global= ??(2);
int sample1_stateful_alu_1_0_const_8_global= ??(2);
int sample1_stateful_alu_1_0_const_9_global= ??(2);
int sample1_stateful_alu_1_0_rel_op_0_global= ??(2);
int sample1_stateful_alu_1_0_rel_op_1_global= ??(2);
int sample1_stateful_alu_1_0_rel_op_2_global= ??(2);
int sample1_stateful_alu_1_0_rel_op_3_global= ??(2);
int sample1_stateless_alu_2_0_mux1_ctrl= ??(3);
int sample1_stateless_alu_2_0_mux2_ctrl= ??(3);
int sample1_stateless_alu_2_0_opcode= ??(5);
int sample1_stateless_alu_2_0_immediate= ??(2);
int sample1_stateless_alu_2_1_mux1_ctrl= ??(3);
int sample1_stateless_alu_2_1_mux2_ctrl= ??(3);
int sample1_stateless_alu_2_1_opcode= ??(5);
int sample1_stateless_alu_2_1_immediate= ??(2);
int sample1_stateless_alu_2_2_mux1_ctrl= ??(3);
int sample1_stateless_alu_2_2_mux2_ctrl= ??(3);
int sample1_stateless_alu_2_2_opcode= ??(5);
int sample1_stateless_alu_2_2_immediate= ??(2);
int sample1_stateless_alu_2_3_mux1_ctrl= ??(3);
int sample1_stateless_alu_2_3_mux2_ctrl= ??(3);
int sample1_stateless_alu_2_3_opcode= ??(5);
int sample1_stateless_alu_2_3_immediate= ??(2);
int sample1_stateless_alu_2_4_mux1_ctrl= ??(3);
int sample1_stateless_alu_2_4_mux2_ctrl= ??(3);
int sample1_stateless_alu_2_4_opcode= ??(5);
int sample1_stateless_alu_2_4_immediate= ??(2);
int sample1_stateful_alu_2_0_Mux3_0_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_10_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_11_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_12_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_13_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_14_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_15_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_16_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_17_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_18_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_19_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_1_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_20_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_21_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_22_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_23_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_24_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_25_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_26_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_27_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_2_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_3_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_4_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_5_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_6_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_7_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_8_global= ??(2);
int sample1_stateful_alu_2_0_Mux3_9_global= ??(2);
int sample1_stateful_alu_2_0_Opt_0_global= ??(1);
int sample1_stateful_alu_2_0_Opt_1_global= ??(1);
int sample1_stateful_alu_2_0_Opt_2_global= ??(1);
int sample1_stateful_alu_2_0_Opt_3_global= ??(1);
int sample1_stateful_alu_2_0_Opt_4_global= ??(1);
int sample1_stateful_alu_2_0_Opt_5_global= ??(1);
int sample1_stateful_alu_2_0_Opt_6_global= ??(1);
int sample1_stateful_alu_2_0_Opt_7_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_0_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_1_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_2_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_3_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_4_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_5_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_6_global= ??(1);
int sample1_stateful_alu_2_0_arith_op_7_global= ??(1);
int sample1_stateful_alu_2_0_const_0_global= ??(2);
int sample1_stateful_alu_2_0_const_10_global= ??(2);
int sample1_stateful_alu_2_0_const_11_global= ??(2);
int sample1_stateful_alu_2_0_const_12_global= ??(2);
int sample1_stateful_alu_2_0_const_13_global= ??(2);
int sample1_stateful_alu_2_0_const_14_global= ??(2);
int sample1_stateful_alu_2_0_const_15_global= ??(2);
int sample1_stateful_alu_2_0_const_16_global= ??(2);
int sample1_stateful_alu_2_0_const_17_global= ??(2);
int sample1_stateful_alu_2_0_const_18_global= ??(2);
int sample1_stateful_alu_2_0_const_19_global= ??(2);
int sample1_stateful_alu_2_0_const_1_global= ??(2);
int sample1_stateful_alu_2_0_const_2_global= ??(2);
int sample1_stateful_alu_2_0_const_3_global= ??(2);
int sample1_stateful_alu_2_0_const_4_global= ??(2);
int sample1_stateful_alu_2_0_const_5_global= ??(2);
int sample1_stateful_alu_2_0_const_6_global= ??(2);
int sample1_stateful_alu_2_0_const_7_global= ??(2);
int sample1_stateful_alu_2_0_const_8_global= ??(2);
int sample1_stateful_alu_2_0_const_9_global= ??(2);
int sample1_stateful_alu_2_0_rel_op_0_global= ??(2);
int sample1_stateful_alu_2_0_rel_op_1_global= ??(2);
int sample1_stateful_alu_2_0_rel_op_2_global= ??(2);
int sample1_stateful_alu_2_0_rel_op_3_global= ??(2);
int sample1_stateless_alu_3_0_mux1_ctrl= ??(3);
int sample1_stateless_alu_3_0_mux2_ctrl= ??(3);
int sample1_stateless_alu_3_0_opcode= ??(5);
int sample1_stateless_alu_3_0_immediate= ??(2);
int sample1_stateless_alu_3_1_mux1_ctrl= ??(3);
int sample1_stateless_alu_3_1_mux2_ctrl= ??(3);
int sample1_stateless_alu_3_1_opcode= ??(5);
int sample1_stateless_alu_3_1_immediate= ??(2);
int sample1_stateless_alu_3_2_mux1_ctrl= ??(3);
int sample1_stateless_alu_3_2_mux2_ctrl= ??(3);
int sample1_stateless_alu_3_2_opcode= ??(5);
int sample1_stateless_alu_3_2_immediate= ??(2);
int sample1_stateless_alu_3_3_mux1_ctrl= ??(3);
int sample1_stateless_alu_3_3_mux2_ctrl= ??(3);
int sample1_stateless_alu_3_3_opcode= ??(5);
int sample1_stateless_alu_3_3_immediate= ??(2);
int sample1_stateless_alu_3_4_mux1_ctrl= ??(3);
int sample1_stateless_alu_3_4_mux2_ctrl= ??(3);
int sample1_stateless_alu_3_4_opcode= ??(5);
int sample1_stateless_alu_3_4_immediate= ??(2);
int sample1_stateful_alu_3_0_Mux3_0_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_10_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_11_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_12_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_13_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_14_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_15_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_16_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_17_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_18_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_19_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_1_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_20_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_21_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_22_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_23_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_24_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_25_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_26_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_27_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_2_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_3_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_4_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_5_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_6_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_7_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_8_global= ??(2);
int sample1_stateful_alu_3_0_Mux3_9_global= ??(2);
int sample1_stateful_alu_3_0_Opt_0_global= ??(1);
int sample1_stateful_alu_3_0_Opt_1_global= ??(1);
int sample1_stateful_alu_3_0_Opt_2_global= ??(1);
int sample1_stateful_alu_3_0_Opt_3_global= ??(1);
int sample1_stateful_alu_3_0_Opt_4_global= ??(1);
int sample1_stateful_alu_3_0_Opt_5_global= ??(1);
int sample1_stateful_alu_3_0_Opt_6_global= ??(1);
int sample1_stateful_alu_3_0_Opt_7_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_0_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_1_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_2_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_3_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_4_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_5_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_6_global= ??(1);
int sample1_stateful_alu_3_0_arith_op_7_global= ??(1);
int sample1_stateful_alu_3_0_const_0_global= ??(2);
int sample1_stateful_alu_3_0_const_10_global= ??(2);
int sample1_stateful_alu_3_0_const_11_global= ??(2);
int sample1_stateful_alu_3_0_const_12_global= ??(2);
int sample1_stateful_alu_3_0_const_13_global= ??(2);
int sample1_stateful_alu_3_0_const_14_global= ??(2);
int sample1_stateful_alu_3_0_const_15_global= ??(2);
int sample1_stateful_alu_3_0_const_16_global= ??(2);
int sample1_stateful_alu_3_0_const_17_global= ??(2);
int sample1_stateful_alu_3_0_const_18_global= ??(2);
int sample1_stateful_alu_3_0_const_19_global= ??(2);
int sample1_stateful_alu_3_0_const_1_global= ??(2);
int sample1_stateful_alu_3_0_const_2_global= ??(2);
int sample1_stateful_alu_3_0_const_3_global= ??(2);
int sample1_stateful_alu_3_0_const_4_global= ??(2);
int sample1_stateful_alu_3_0_const_5_global= ??(2);
int sample1_stateful_alu_3_0_const_6_global= ??(2);
int sample1_stateful_alu_3_0_const_7_global= ??(2);
int sample1_stateful_alu_3_0_const_8_global= ??(2);
int sample1_stateful_alu_3_0_const_9_global= ??(2);
int sample1_stateful_alu_3_0_rel_op_0_global= ??(2);
int sample1_stateful_alu_3_0_rel_op_1_global= ??(2);
int sample1_stateful_alu_3_0_rel_op_2_global= ??(2);
int sample1_stateful_alu_3_0_rel_op_3_global= ??(2);
int sample1_stateless_alu_4_0_mux1_ctrl= ??(3);
int sample1_stateless_alu_4_0_mux2_ctrl= ??(3);
int sample1_stateless_alu_4_0_opcode= ??(5);
int sample1_stateless_alu_4_0_immediate= ??(2);
int sample1_stateless_alu_4_1_mux1_ctrl= ??(3);
int sample1_stateless_alu_4_1_mux2_ctrl= ??(3);
int sample1_stateless_alu_4_1_opcode= ??(5);
int sample1_stateless_alu_4_1_immediate= ??(2);
int sample1_stateless_alu_4_2_mux1_ctrl= ??(3);
int sample1_stateless_alu_4_2_mux2_ctrl= ??(3);
int sample1_stateless_alu_4_2_opcode= ??(5);
int sample1_stateless_alu_4_2_immediate= ??(2);
int sample1_stateless_alu_4_3_mux1_ctrl= ??(3);
int sample1_stateless_alu_4_3_mux2_ctrl= ??(3);
int sample1_stateless_alu_4_3_opcode= ??(5);
int sample1_stateless_alu_4_3_immediate= ??(2);
int sample1_stateless_alu_4_4_mux1_ctrl= ??(3);
int sample1_stateless_alu_4_4_mux2_ctrl= ??(3);
int sample1_stateless_alu_4_4_opcode= ??(5);
int sample1_stateless_alu_4_4_immediate= ??(2);
int sample1_stateful_alu_4_0_Mux3_0_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_10_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_11_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_12_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_13_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_14_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_15_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_16_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_17_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_18_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_19_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_1_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_20_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_21_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_22_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_23_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_24_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_25_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_26_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_27_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_2_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_3_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_4_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_5_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_6_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_7_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_8_global= ??(2);
int sample1_stateful_alu_4_0_Mux3_9_global= ??(2);
int sample1_stateful_alu_4_0_Opt_0_global= ??(1);
int sample1_stateful_alu_4_0_Opt_1_global= ??(1);
int sample1_stateful_alu_4_0_Opt_2_global= ??(1);
int sample1_stateful_alu_4_0_Opt_3_global= ??(1);
int sample1_stateful_alu_4_0_Opt_4_global= ??(1);
int sample1_stateful_alu_4_0_Opt_5_global= ??(1);
int sample1_stateful_alu_4_0_Opt_6_global= ??(1);
int sample1_stateful_alu_4_0_Opt_7_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_0_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_1_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_2_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_3_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_4_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_5_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_6_global= ??(1);
int sample1_stateful_alu_4_0_arith_op_7_global= ??(1);
int sample1_stateful_alu_4_0_const_0_global= ??(2);
int sample1_stateful_alu_4_0_const_10_global= ??(2);
int sample1_stateful_alu_4_0_const_11_global= ??(2);
int sample1_stateful_alu_4_0_const_12_global= ??(2);
int sample1_stateful_alu_4_0_const_13_global= ??(2);
int sample1_stateful_alu_4_0_const_14_global= ??(2);
int sample1_stateful_alu_4_0_const_15_global= ??(2);
int sample1_stateful_alu_4_0_const_16_global= ??(2);
int sample1_stateful_alu_4_0_const_17_global= ??(2);
int sample1_stateful_alu_4_0_const_18_global= ??(2);
int sample1_stateful_alu_4_0_const_19_global= ??(2);
int sample1_stateful_alu_4_0_const_1_global= ??(2);
int sample1_stateful_alu_4_0_const_2_global= ??(2);
int sample1_stateful_alu_4_0_const_3_global= ??(2);
int sample1_stateful_alu_4_0_const_4_global= ??(2);
int sample1_stateful_alu_4_0_const_5_global= ??(2);
int sample1_stateful_alu_4_0_const_6_global= ??(2);
int sample1_stateful_alu_4_0_const_7_global= ??(2);
int sample1_stateful_alu_4_0_const_8_global= ??(2);
int sample1_stateful_alu_4_0_const_9_global= ??(2);
int sample1_stateful_alu_4_0_rel_op_0_global= ??(2);
int sample1_stateful_alu_4_0_rel_op_1_global= ??(2);
int sample1_stateful_alu_4_0_rel_op_2_global= ??(2);
int sample1_stateful_alu_4_0_rel_op_3_global= ??(2);
int sample1_stateful_operand_mux_0_0_0_ctrl= ??(3);
int sample1_stateful_operand_mux_0_0_1_ctrl= ??(3);
int sample1_stateful_operand_mux_0_0_2_ctrl= ??(3);
int sample1_stateful_operand_mux_0_0_3_ctrl= ??(3);
int sample1_stateful_operand_mux_0_0_4_ctrl= ??(3);
int sample1_stateful_operand_mux_1_0_0_ctrl= ??(3);
int sample1_stateful_operand_mux_1_0_1_ctrl= ??(3);
int sample1_stateful_operand_mux_1_0_2_ctrl= ??(3);
int sample1_stateful_operand_mux_1_0_3_ctrl= ??(3);
int sample1_stateful_operand_mux_1_0_4_ctrl= ??(3);
int sample1_stateful_operand_mux_2_0_0_ctrl= ??(3);
int sample1_stateful_operand_mux_2_0_1_ctrl= ??(3);
int sample1_stateful_operand_mux_2_0_2_ctrl= ??(3);
int sample1_stateful_operand_mux_2_0_3_ctrl= ??(3);
int sample1_stateful_operand_mux_2_0_4_ctrl= ??(3);
int sample1_stateful_operand_mux_3_0_0_ctrl= ??(3);
int sample1_stateful_operand_mux_3_0_1_ctrl= ??(3);
int sample1_stateful_operand_mux_3_0_2_ctrl= ??(3);
int sample1_stateful_operand_mux_3_0_3_ctrl= ??(3);
int sample1_stateful_operand_mux_3_0_4_ctrl= ??(3);
int sample1_stateful_operand_mux_4_0_0_ctrl= ??(3);
int sample1_stateful_operand_mux_4_0_1_ctrl= ??(3);
int sample1_stateful_operand_mux_4_0_2_ctrl= ??(3);
int sample1_stateful_operand_mux_4_0_3_ctrl= ??(3);
int sample1_stateful_operand_mux_4_0_4_ctrl= ??(3);
int sample1_output_mux_phv_0_0_ctrl= ??(2);
int sample1_output_mux_phv_0_1_ctrl= ??(2);
int sample1_output_mux_phv_0_2_ctrl= ??(2);
int sample1_output_mux_phv_0_3_ctrl= ??(2);
int sample1_output_mux_phv_0_4_ctrl= ??(2);
int sample1_output_mux_phv_1_0_ctrl= ??(2);
int sample1_output_mux_phv_1_1_ctrl= ??(2);
int sample1_output_mux_phv_1_2_ctrl= ??(2);
int sample1_output_mux_phv_1_3_ctrl= ??(2);
int sample1_output_mux_phv_1_4_ctrl= ??(2);
int sample1_output_mux_phv_2_0_ctrl= ??(2);
int sample1_output_mux_phv_2_1_ctrl= ??(2);
int sample1_output_mux_phv_2_2_ctrl= ??(2);
int sample1_output_mux_phv_2_3_ctrl= ??(2);
int sample1_output_mux_phv_2_4_ctrl= ??(2);
int sample1_output_mux_phv_3_0_ctrl= ??(2);
int sample1_output_mux_phv_3_1_ctrl= ??(2);
int sample1_output_mux_phv_3_2_ctrl= ??(2);
int sample1_output_mux_phv_3_3_ctrl= ??(2);
int sample1_output_mux_phv_3_4_ctrl= ??(2);
int sample1_output_mux_phv_4_0_ctrl= ??(2);
int sample1_output_mux_phv_4_1_ctrl= ??(2);
int sample1_output_mux_phv_4_2_ctrl= ??(2);
int sample1_output_mux_phv_4_3_ctrl= ??(2);
int sample1_output_mux_phv_4_4_ctrl= ??(2);
int sample1_salu_config_0_0= ??(1);
int sample1_salu_config_1_0= ??(1);
int sample1_salu_config_2_0= ??(1);
int sample1_salu_config_3_0= ??(1);
int sample1_salu_config_4_0= ??(1);


// Definitions of muxes and ALUs of the router
// Operand muxes for each ALU in each stage
// Total of 5 * 5 * 3 5-to-1 muxes
// The 3 is for two stateless operands and one stateful operand.

int sample1_stateful_operand_mux_0_0_0(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_0_0_0_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_0_0_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_0_0_1(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_0_0_1_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_0_0_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_0_0_2(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_0_0_2_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_0_0_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_0_0_3(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_0_0_3_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_0_0_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_0_0_4(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_0_0_4_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_0_0_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_1_0_0(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_1_0_0_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_1_0_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_1_0_1(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_1_0_1_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_1_0_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_1_0_2(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_1_0_2_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_1_0_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_1_0_3(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_1_0_3_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_1_0_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_1_0_4(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_1_0_4_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_1_0_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_2_0_0(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_2_0_0_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_2_0_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_2_0_1(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_2_0_1_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_2_0_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_2_0_2(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_2_0_2_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_2_0_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_2_0_3(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_2_0_3_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_2_0_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_2_0_4(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_2_0_4_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_2_0_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_3_0_0(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_3_0_0_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_3_0_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_3_0_1(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_3_0_1_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_3_0_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_3_0_2(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_3_0_2_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_3_0_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_3_0_3(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_3_0_3_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_3_0_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_3_0_4(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_3_0_4_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_3_0_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_4_0_0(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_4_0_0_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_4_0_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_4_0_1(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_4_0_1_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_4_0_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_4_0_2(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_4_0_2_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_4_0_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_4_0_3(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_4_0_3_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_4_0_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}
int sample1_stateful_operand_mux_4_0_4(int input0,int input1,int input2,int input3,int input4, int sample1_stateful_operand_mux_4_0_4_ctrl_local) {
    int mux_ctrl = sample1_stateful_operand_mux_4_0_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}


// Output mux for each PHV container
// Allows the container to be written from either its own stateless ALU or any stateful ALU

int sample1_output_mux_phv_0_0(int input0,int input1,int input2, int sample1_output_mux_phv_0_0_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_0_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_0_1(int input0,int input1,int input2, int sample1_output_mux_phv_0_1_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_0_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_0_2(int input0,int input1,int input2, int sample1_output_mux_phv_0_2_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_0_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_0_3(int input0,int input1,int input2, int sample1_output_mux_phv_0_3_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_0_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_0_4(int input0,int input1,int input2, int sample1_output_mux_phv_0_4_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_0_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_1_0(int input0,int input1,int input2, int sample1_output_mux_phv_1_0_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_1_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_1_1(int input0,int input1,int input2, int sample1_output_mux_phv_1_1_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_1_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_1_2(int input0,int input1,int input2, int sample1_output_mux_phv_1_2_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_1_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_1_3(int input0,int input1,int input2, int sample1_output_mux_phv_1_3_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_1_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_1_4(int input0,int input1,int input2, int sample1_output_mux_phv_1_4_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_1_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_2_0(int input0,int input1,int input2, int sample1_output_mux_phv_2_0_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_2_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_2_1(int input0,int input1,int input2, int sample1_output_mux_phv_2_1_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_2_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_2_2(int input0,int input1,int input2, int sample1_output_mux_phv_2_2_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_2_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_2_3(int input0,int input1,int input2, int sample1_output_mux_phv_2_3_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_2_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_2_4(int input0,int input1,int input2, int sample1_output_mux_phv_2_4_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_2_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_3_0(int input0,int input1,int input2, int sample1_output_mux_phv_3_0_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_3_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_3_1(int input0,int input1,int input2, int sample1_output_mux_phv_3_1_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_3_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_3_2(int input0,int input1,int input2, int sample1_output_mux_phv_3_2_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_3_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_3_3(int input0,int input1,int input2, int sample1_output_mux_phv_3_3_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_3_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_3_4(int input0,int input1,int input2, int sample1_output_mux_phv_3_4_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_3_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_4_0(int input0,int input1,int input2, int sample1_output_mux_phv_4_0_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_4_0_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_4_1(int input0,int input1,int input2, int sample1_output_mux_phv_4_1_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_4_1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_4_2(int input0,int input1,int input2, int sample1_output_mux_phv_4_2_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_4_2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_4_3(int input0,int input1,int input2, int sample1_output_mux_phv_4_3_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_4_3_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}
int sample1_output_mux_phv_4_4(int input0,int input1,int input2, int sample1_output_mux_phv_4_4_ctrl_local) {
    int mux_ctrl = sample1_output_mux_phv_4_4_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }

    else { return input2; }
}


// Definition for ALUs

int sample1_stateless_alu_0_0_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_0_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_0_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_0_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_0_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_0_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_0(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_0_0_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_0_0_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_0_1_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_1_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_1_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_1_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_1_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_1_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_1(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_0_1_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_0_1_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_0_2_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_2_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_2_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_2_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_2_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_2_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_2(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_0_2_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_0_2_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_0_3_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_3_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_3_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_3_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_3_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_3_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_3(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_0_3_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_0_3_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_0_4_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_4_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_4_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_4_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_0_4_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_0_4_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_0_4(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_0_4_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_0_4_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}



int sample1_stateful_alu_0_0_Mux3_0(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_1(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_2(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_C_0(int const) {
    return const;
    }

bit sample1_stateful_alu_0_0_rel_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_0_0_Mux3_3(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_4(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_5(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_C_1(int const) {
    return const;
    }

bit sample1_stateful_alu_0_0_rel_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_0_0_Opt_0(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_2(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_6(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_3(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_7(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Opt_1(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_4(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_8(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_5(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_9(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Opt_2(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_6(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_10(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_7(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_11(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Opt_3(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_8(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_12(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_9(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_13(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Mux3_14(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_15(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_16(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_C_10(int const) {
    return const;
    }

bit sample1_stateful_alu_0_0_rel_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_0_0_Mux3_17(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_18(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_Mux3_19(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_0_0_C_11(int const) {
    return const;
    }

bit sample1_stateful_alu_0_0_rel_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_0_0_Opt_4(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_12(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_20(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_13(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_21(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_4(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Opt_5(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_14(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_22(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_15(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_23(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_5(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Opt_6(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_16(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_24(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_17(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_25(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_6(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_0_0_Opt_7(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_0_0_C_18(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_26(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_C_19(int const) {
    return const;
    }

int sample1_stateful_alu_0_0_Mux3_27(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_0_0_arith_op_7(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

|StateGroup| sample1_stateful_alu_0_0(ref |StateGroup| state_group, int pkt_1,int pkt_2,int pkt_3,int pkt_4,int pkt_5, int Mux3_0,int Mux3_1,int Mux3_10,int Mux3_11,int Mux3_12,int Mux3_13,int Mux3_14,int Mux3_15,int Mux3_16,int Mux3_17,int Mux3_18,int Mux3_19,int Mux3_2,int Mux3_20,int Mux3_21,int Mux3_22,int Mux3_23,int Mux3_24,int Mux3_25,int Mux3_26,int Mux3_27,int Mux3_3,int Mux3_4,int Mux3_5,int Mux3_6,int Mux3_7,int Mux3_8,int Mux3_9,int Opt_0,int Opt_1,int Opt_2,int Opt_3,int Opt_4,int Opt_5,int Opt_6,int Opt_7,int arith_op_0,int arith_op_1,int arith_op_2,int arith_op_3,int arith_op_4,int arith_op_5,int arith_op_6,int arith_op_7,int const_0,int const_1,int const_10,int const_11,int const_12,int const_13,int const_14,int const_15,int const_16,int const_17,int const_18,int const_19,int const_2,int const_3,int const_4,int const_5,int const_6,int const_7,int const_8,int const_9,int rel_op_0,int rel_op_1,int rel_op_2,int rel_op_3) {
 |StateGroup| old_state_group = state_group;
int state_0 = state_group.state_0;
int state_1 = state_group.state_1;if (sample1_stateful_alu_0_0_rel_op_0(sample1_stateful_alu_0_0_Mux3_0(state_0,state_1,Mux3_0)+sample1_stateful_alu_0_0_Mux3_1(pkt_1,pkt_2,Mux3_1)-sample1_stateful_alu_0_0_Mux3_2(pkt_1,pkt_2,Mux3_2),sample1_stateful_alu_0_0_C_0(const_0),rel_op_0)) {if (sample1_stateful_alu_0_0_rel_op_1(sample1_stateful_alu_0_0_Mux3_3(state_0,state_1,Mux3_3)+sample1_stateful_alu_0_0_Mux3_4(pkt_1,pkt_2,Mux3_4)-sample1_stateful_alu_0_0_Mux3_5(pkt_1,pkt_2,Mux3_5),sample1_stateful_alu_0_0_C_1(const_1),rel_op_1)) {state_0 = sample1_stateful_alu_0_0_Opt_0(state_0,Opt_0)+sample1_stateful_alu_0_0_arith_op_0(sample1_stateful_alu_0_0_Mux3_6(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_2(const_2),Mux3_6),sample1_stateful_alu_0_0_Mux3_7(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_3(const_3),Mux3_7),arith_op_0);state_1 = sample1_stateful_alu_0_0_Opt_1(state_1,Opt_1)+sample1_stateful_alu_0_0_arith_op_1(sample1_stateful_alu_0_0_Mux3_8(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_4(const_4),Mux3_8),sample1_stateful_alu_0_0_Mux3_9(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_5(const_5),Mux3_9),arith_op_1);}else {state_0 = sample1_stateful_alu_0_0_Opt_2(state_0,Opt_2)+sample1_stateful_alu_0_0_arith_op_2(sample1_stateful_alu_0_0_Mux3_10(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_6(const_6),Mux3_10),sample1_stateful_alu_0_0_Mux3_11(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_7(const_7),Mux3_11),arith_op_2);state_1 = sample1_stateful_alu_0_0_Opt_3(state_1,Opt_3)+sample1_stateful_alu_0_0_arith_op_3(sample1_stateful_alu_0_0_Mux3_12(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_8(const_8),Mux3_12),sample1_stateful_alu_0_0_Mux3_13(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_9(const_9),Mux3_13),arith_op_3);}}else if (sample1_stateful_alu_0_0_rel_op_2(sample1_stateful_alu_0_0_Mux3_14(state_0,state_1,Mux3_14)+sample1_stateful_alu_0_0_Mux3_15(pkt_1,pkt_2,Mux3_15)-sample1_stateful_alu_0_0_Mux3_16(pkt_1,pkt_2,Mux3_16),sample1_stateful_alu_0_0_C_10(const_10),rel_op_2)) {if (sample1_stateful_alu_0_0_rel_op_3(sample1_stateful_alu_0_0_Mux3_17(state_0,state_1,Mux3_17)+sample1_stateful_alu_0_0_Mux3_18(pkt_1,pkt_2,Mux3_18)-sample1_stateful_alu_0_0_Mux3_19(pkt_1,pkt_2,Mux3_19),sample1_stateful_alu_0_0_C_11(const_11),rel_op_3)) {state_0 = sample1_stateful_alu_0_0_Opt_4(state_0,Opt_4)+sample1_stateful_alu_0_0_arith_op_4(sample1_stateful_alu_0_0_Mux3_20(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_12(const_12),Mux3_20),sample1_stateful_alu_0_0_Mux3_21(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_13(const_13),Mux3_21),arith_op_4);state_1 = sample1_stateful_alu_0_0_Opt_5(state_1,Opt_5)+sample1_stateful_alu_0_0_arith_op_5(sample1_stateful_alu_0_0_Mux3_22(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_14(const_14),Mux3_22),sample1_stateful_alu_0_0_Mux3_23(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_15(const_15),Mux3_23),arith_op_5);}else {state_0 = sample1_stateful_alu_0_0_Opt_6(state_0,Opt_6)+sample1_stateful_alu_0_0_arith_op_6(sample1_stateful_alu_0_0_Mux3_24(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_16(const_16),Mux3_24),sample1_stateful_alu_0_0_Mux3_25(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_17(const_17),Mux3_25),arith_op_6);state_1 = sample1_stateful_alu_0_0_Opt_7(state_1,Opt_7)+sample1_stateful_alu_0_0_arith_op_7(sample1_stateful_alu_0_0_Mux3_26(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_18(const_18),Mux3_26),sample1_stateful_alu_0_0_Mux3_27(pkt_1,pkt_2,sample1_stateful_alu_0_0_C_19(const_19),Mux3_27),arith_op_7);}}
state_group.state_0 = state_0;
state_group.state_1 = state_1;
; return old_state_group;
}
int sample1_stateless_alu_1_0_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_0_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_0_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_0_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_0_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_0_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_0(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_1_0_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_1_0_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_1_1_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_1_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_1_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_1_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_1_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_1_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_1(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_1_1_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_1_1_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_1_2_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_2_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_2_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_2_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_2_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_2_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_2(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_1_2_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_1_2_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_1_3_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_3_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_3_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_3_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_3_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_3_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_3(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_1_3_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_1_3_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_1_4_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_4_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_4_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_4_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_1_4_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_1_4_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_1_4(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_1_4_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_1_4_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}



int sample1_stateful_alu_1_0_Mux3_0(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_1(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_2(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_C_0(int const) {
    return const;
    }

bit sample1_stateful_alu_1_0_rel_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_1_0_Mux3_3(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_4(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_5(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_C_1(int const) {
    return const;
    }

bit sample1_stateful_alu_1_0_rel_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_1_0_Opt_0(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_2(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_6(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_3(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_7(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Opt_1(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_4(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_8(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_5(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_9(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Opt_2(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_6(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_10(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_7(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_11(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Opt_3(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_8(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_12(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_9(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_13(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Mux3_14(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_15(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_16(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_C_10(int const) {
    return const;
    }

bit sample1_stateful_alu_1_0_rel_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_1_0_Mux3_17(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_18(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_Mux3_19(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_1_0_C_11(int const) {
    return const;
    }

bit sample1_stateful_alu_1_0_rel_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_1_0_Opt_4(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_12(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_20(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_13(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_21(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_4(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Opt_5(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_14(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_22(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_15(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_23(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_5(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Opt_6(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_16(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_24(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_17(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_25(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_6(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_1_0_Opt_7(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_1_0_C_18(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_26(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_C_19(int const) {
    return const;
    }

int sample1_stateful_alu_1_0_Mux3_27(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_1_0_arith_op_7(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

|StateGroup| sample1_stateful_alu_1_0(ref |StateGroup| state_group, int pkt_1,int pkt_2,int pkt_3,int pkt_4,int pkt_5, int Mux3_0,int Mux3_1,int Mux3_10,int Mux3_11,int Mux3_12,int Mux3_13,int Mux3_14,int Mux3_15,int Mux3_16,int Mux3_17,int Mux3_18,int Mux3_19,int Mux3_2,int Mux3_20,int Mux3_21,int Mux3_22,int Mux3_23,int Mux3_24,int Mux3_25,int Mux3_26,int Mux3_27,int Mux3_3,int Mux3_4,int Mux3_5,int Mux3_6,int Mux3_7,int Mux3_8,int Mux3_9,int Opt_0,int Opt_1,int Opt_2,int Opt_3,int Opt_4,int Opt_5,int Opt_6,int Opt_7,int arith_op_0,int arith_op_1,int arith_op_2,int arith_op_3,int arith_op_4,int arith_op_5,int arith_op_6,int arith_op_7,int const_0,int const_1,int const_10,int const_11,int const_12,int const_13,int const_14,int const_15,int const_16,int const_17,int const_18,int const_19,int const_2,int const_3,int const_4,int const_5,int const_6,int const_7,int const_8,int const_9,int rel_op_0,int rel_op_1,int rel_op_2,int rel_op_3) {
 |StateGroup| old_state_group = state_group;
int state_0 = state_group.state_0;
int state_1 = state_group.state_1;if (sample1_stateful_alu_1_0_rel_op_0(sample1_stateful_alu_1_0_Mux3_0(state_0,state_1,Mux3_0)+sample1_stateful_alu_1_0_Mux3_1(pkt_1,pkt_2,Mux3_1)-sample1_stateful_alu_1_0_Mux3_2(pkt_1,pkt_2,Mux3_2),sample1_stateful_alu_1_0_C_0(const_0),rel_op_0)) {if (sample1_stateful_alu_1_0_rel_op_1(sample1_stateful_alu_1_0_Mux3_3(state_0,state_1,Mux3_3)+sample1_stateful_alu_1_0_Mux3_4(pkt_1,pkt_2,Mux3_4)-sample1_stateful_alu_1_0_Mux3_5(pkt_1,pkt_2,Mux3_5),sample1_stateful_alu_1_0_C_1(const_1),rel_op_1)) {state_0 = sample1_stateful_alu_1_0_Opt_0(state_0,Opt_0)+sample1_stateful_alu_1_0_arith_op_0(sample1_stateful_alu_1_0_Mux3_6(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_2(const_2),Mux3_6),sample1_stateful_alu_1_0_Mux3_7(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_3(const_3),Mux3_7),arith_op_0);state_1 = sample1_stateful_alu_1_0_Opt_1(state_1,Opt_1)+sample1_stateful_alu_1_0_arith_op_1(sample1_stateful_alu_1_0_Mux3_8(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_4(const_4),Mux3_8),sample1_stateful_alu_1_0_Mux3_9(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_5(const_5),Mux3_9),arith_op_1);}else {state_0 = sample1_stateful_alu_1_0_Opt_2(state_0,Opt_2)+sample1_stateful_alu_1_0_arith_op_2(sample1_stateful_alu_1_0_Mux3_10(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_6(const_6),Mux3_10),sample1_stateful_alu_1_0_Mux3_11(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_7(const_7),Mux3_11),arith_op_2);state_1 = sample1_stateful_alu_1_0_Opt_3(state_1,Opt_3)+sample1_stateful_alu_1_0_arith_op_3(sample1_stateful_alu_1_0_Mux3_12(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_8(const_8),Mux3_12),sample1_stateful_alu_1_0_Mux3_13(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_9(const_9),Mux3_13),arith_op_3);}}else if (sample1_stateful_alu_1_0_rel_op_2(sample1_stateful_alu_1_0_Mux3_14(state_0,state_1,Mux3_14)+sample1_stateful_alu_1_0_Mux3_15(pkt_1,pkt_2,Mux3_15)-sample1_stateful_alu_1_0_Mux3_16(pkt_1,pkt_2,Mux3_16),sample1_stateful_alu_1_0_C_10(const_10),rel_op_2)) {if (sample1_stateful_alu_1_0_rel_op_3(sample1_stateful_alu_1_0_Mux3_17(state_0,state_1,Mux3_17)+sample1_stateful_alu_1_0_Mux3_18(pkt_1,pkt_2,Mux3_18)-sample1_stateful_alu_1_0_Mux3_19(pkt_1,pkt_2,Mux3_19),sample1_stateful_alu_1_0_C_11(const_11),rel_op_3)) {state_0 = sample1_stateful_alu_1_0_Opt_4(state_0,Opt_4)+sample1_stateful_alu_1_0_arith_op_4(sample1_stateful_alu_1_0_Mux3_20(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_12(const_12),Mux3_20),sample1_stateful_alu_1_0_Mux3_21(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_13(const_13),Mux3_21),arith_op_4);state_1 = sample1_stateful_alu_1_0_Opt_5(state_1,Opt_5)+sample1_stateful_alu_1_0_arith_op_5(sample1_stateful_alu_1_0_Mux3_22(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_14(const_14),Mux3_22),sample1_stateful_alu_1_0_Mux3_23(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_15(const_15),Mux3_23),arith_op_5);}else {state_0 = sample1_stateful_alu_1_0_Opt_6(state_0,Opt_6)+sample1_stateful_alu_1_0_arith_op_6(sample1_stateful_alu_1_0_Mux3_24(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_16(const_16),Mux3_24),sample1_stateful_alu_1_0_Mux3_25(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_17(const_17),Mux3_25),arith_op_6);state_1 = sample1_stateful_alu_1_0_Opt_7(state_1,Opt_7)+sample1_stateful_alu_1_0_arith_op_7(sample1_stateful_alu_1_0_Mux3_26(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_18(const_18),Mux3_26),sample1_stateful_alu_1_0_Mux3_27(pkt_1,pkt_2,sample1_stateful_alu_1_0_C_19(const_19),Mux3_27),arith_op_7);}}
state_group.state_0 = state_0;
state_group.state_1 = state_1;
; return old_state_group;
}
int sample1_stateless_alu_2_0_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_0_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_0_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_0_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_0_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_0_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_0(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_2_0_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_2_0_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_2_1_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_1_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_1_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_1_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_1_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_1_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_1(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_2_1_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_2_1_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_2_2_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_2_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_2_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_2_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_2_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_2_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_2(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_2_2_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_2_2_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_2_3_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_3_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_3_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_3_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_3_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_3_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_3(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_2_3_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_2_3_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_2_4_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_4_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_4_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_4_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_2_4_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_2_4_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_2_4(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_2_4_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_2_4_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}



int sample1_stateful_alu_2_0_Mux3_0(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_1(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_2(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_C_0(int const) {
    return const;
    }

bit sample1_stateful_alu_2_0_rel_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_2_0_Mux3_3(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_4(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_5(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_C_1(int const) {
    return const;
    }

bit sample1_stateful_alu_2_0_rel_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_2_0_Opt_0(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_2(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_6(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_3(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_7(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Opt_1(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_4(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_8(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_5(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_9(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Opt_2(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_6(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_10(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_7(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_11(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Opt_3(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_8(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_12(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_9(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_13(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Mux3_14(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_15(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_16(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_C_10(int const) {
    return const;
    }

bit sample1_stateful_alu_2_0_rel_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_2_0_Mux3_17(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_18(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_Mux3_19(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_2_0_C_11(int const) {
    return const;
    }

bit sample1_stateful_alu_2_0_rel_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_2_0_Opt_4(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_12(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_20(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_13(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_21(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_4(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Opt_5(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_14(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_22(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_15(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_23(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_5(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Opt_6(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_16(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_24(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_17(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_25(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_6(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_2_0_Opt_7(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_2_0_C_18(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_26(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_C_19(int const) {
    return const;
    }

int sample1_stateful_alu_2_0_Mux3_27(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_2_0_arith_op_7(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

|StateGroup| sample1_stateful_alu_2_0(ref |StateGroup| state_group, int pkt_1,int pkt_2,int pkt_3,int pkt_4,int pkt_5, int Mux3_0,int Mux3_1,int Mux3_10,int Mux3_11,int Mux3_12,int Mux3_13,int Mux3_14,int Mux3_15,int Mux3_16,int Mux3_17,int Mux3_18,int Mux3_19,int Mux3_2,int Mux3_20,int Mux3_21,int Mux3_22,int Mux3_23,int Mux3_24,int Mux3_25,int Mux3_26,int Mux3_27,int Mux3_3,int Mux3_4,int Mux3_5,int Mux3_6,int Mux3_7,int Mux3_8,int Mux3_9,int Opt_0,int Opt_1,int Opt_2,int Opt_3,int Opt_4,int Opt_5,int Opt_6,int Opt_7,int arith_op_0,int arith_op_1,int arith_op_2,int arith_op_3,int arith_op_4,int arith_op_5,int arith_op_6,int arith_op_7,int const_0,int const_1,int const_10,int const_11,int const_12,int const_13,int const_14,int const_15,int const_16,int const_17,int const_18,int const_19,int const_2,int const_3,int const_4,int const_5,int const_6,int const_7,int const_8,int const_9,int rel_op_0,int rel_op_1,int rel_op_2,int rel_op_3) {
 |StateGroup| old_state_group = state_group;
int state_0 = state_group.state_0;
int state_1 = state_group.state_1;if (sample1_stateful_alu_2_0_rel_op_0(sample1_stateful_alu_2_0_Mux3_0(state_0,state_1,Mux3_0)+sample1_stateful_alu_2_0_Mux3_1(pkt_1,pkt_2,Mux3_1)-sample1_stateful_alu_2_0_Mux3_2(pkt_1,pkt_2,Mux3_2),sample1_stateful_alu_2_0_C_0(const_0),rel_op_0)) {if (sample1_stateful_alu_2_0_rel_op_1(sample1_stateful_alu_2_0_Mux3_3(state_0,state_1,Mux3_3)+sample1_stateful_alu_2_0_Mux3_4(pkt_1,pkt_2,Mux3_4)-sample1_stateful_alu_2_0_Mux3_5(pkt_1,pkt_2,Mux3_5),sample1_stateful_alu_2_0_C_1(const_1),rel_op_1)) {state_0 = sample1_stateful_alu_2_0_Opt_0(state_0,Opt_0)+sample1_stateful_alu_2_0_arith_op_0(sample1_stateful_alu_2_0_Mux3_6(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_2(const_2),Mux3_6),sample1_stateful_alu_2_0_Mux3_7(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_3(const_3),Mux3_7),arith_op_0);state_1 = sample1_stateful_alu_2_0_Opt_1(state_1,Opt_1)+sample1_stateful_alu_2_0_arith_op_1(sample1_stateful_alu_2_0_Mux3_8(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_4(const_4),Mux3_8),sample1_stateful_alu_2_0_Mux3_9(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_5(const_5),Mux3_9),arith_op_1);}else {state_0 = sample1_stateful_alu_2_0_Opt_2(state_0,Opt_2)+sample1_stateful_alu_2_0_arith_op_2(sample1_stateful_alu_2_0_Mux3_10(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_6(const_6),Mux3_10),sample1_stateful_alu_2_0_Mux3_11(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_7(const_7),Mux3_11),arith_op_2);state_1 = sample1_stateful_alu_2_0_Opt_3(state_1,Opt_3)+sample1_stateful_alu_2_0_arith_op_3(sample1_stateful_alu_2_0_Mux3_12(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_8(const_8),Mux3_12),sample1_stateful_alu_2_0_Mux3_13(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_9(const_9),Mux3_13),arith_op_3);}}else if (sample1_stateful_alu_2_0_rel_op_2(sample1_stateful_alu_2_0_Mux3_14(state_0,state_1,Mux3_14)+sample1_stateful_alu_2_0_Mux3_15(pkt_1,pkt_2,Mux3_15)-sample1_stateful_alu_2_0_Mux3_16(pkt_1,pkt_2,Mux3_16),sample1_stateful_alu_2_0_C_10(const_10),rel_op_2)) {if (sample1_stateful_alu_2_0_rel_op_3(sample1_stateful_alu_2_0_Mux3_17(state_0,state_1,Mux3_17)+sample1_stateful_alu_2_0_Mux3_18(pkt_1,pkt_2,Mux3_18)-sample1_stateful_alu_2_0_Mux3_19(pkt_1,pkt_2,Mux3_19),sample1_stateful_alu_2_0_C_11(const_11),rel_op_3)) {state_0 = sample1_stateful_alu_2_0_Opt_4(state_0,Opt_4)+sample1_stateful_alu_2_0_arith_op_4(sample1_stateful_alu_2_0_Mux3_20(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_12(const_12),Mux3_20),sample1_stateful_alu_2_0_Mux3_21(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_13(const_13),Mux3_21),arith_op_4);state_1 = sample1_stateful_alu_2_0_Opt_5(state_1,Opt_5)+sample1_stateful_alu_2_0_arith_op_5(sample1_stateful_alu_2_0_Mux3_22(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_14(const_14),Mux3_22),sample1_stateful_alu_2_0_Mux3_23(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_15(const_15),Mux3_23),arith_op_5);}else {state_0 = sample1_stateful_alu_2_0_Opt_6(state_0,Opt_6)+sample1_stateful_alu_2_0_arith_op_6(sample1_stateful_alu_2_0_Mux3_24(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_16(const_16),Mux3_24),sample1_stateful_alu_2_0_Mux3_25(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_17(const_17),Mux3_25),arith_op_6);state_1 = sample1_stateful_alu_2_0_Opt_7(state_1,Opt_7)+sample1_stateful_alu_2_0_arith_op_7(sample1_stateful_alu_2_0_Mux3_26(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_18(const_18),Mux3_26),sample1_stateful_alu_2_0_Mux3_27(pkt_1,pkt_2,sample1_stateful_alu_2_0_C_19(const_19),Mux3_27),arith_op_7);}}
state_group.state_0 = state_0;
state_group.state_1 = state_1;
; return old_state_group;
}
int sample1_stateless_alu_3_0_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_0_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_0_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_0_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_0_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_0_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_0(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_3_0_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_3_0_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_3_1_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_1_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_1_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_1_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_1_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_1_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_1(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_3_1_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_3_1_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_3_2_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_2_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_2_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_2_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_2_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_2_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_2(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_3_2_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_3_2_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_3_3_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_3_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_3_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_3_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_3_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_3_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_3(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_3_3_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_3_3_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_3_4_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_4_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_4_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_4_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_3_4_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_3_4_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_3_4(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_3_4_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_3_4_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}



int sample1_stateful_alu_3_0_Mux3_0(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_1(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_2(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_C_0(int const) {
    return const;
    }

bit sample1_stateful_alu_3_0_rel_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_3_0_Mux3_3(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_4(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_5(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_C_1(int const) {
    return const;
    }

bit sample1_stateful_alu_3_0_rel_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_3_0_Opt_0(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_2(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_6(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_3(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_7(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Opt_1(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_4(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_8(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_5(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_9(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Opt_2(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_6(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_10(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_7(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_11(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Opt_3(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_8(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_12(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_9(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_13(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Mux3_14(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_15(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_16(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_C_10(int const) {
    return const;
    }

bit sample1_stateful_alu_3_0_rel_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_3_0_Mux3_17(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_18(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_Mux3_19(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_3_0_C_11(int const) {
    return const;
    }

bit sample1_stateful_alu_3_0_rel_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_3_0_Opt_4(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_12(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_20(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_13(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_21(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_4(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Opt_5(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_14(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_22(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_15(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_23(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_5(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Opt_6(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_16(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_24(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_17(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_25(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_6(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_3_0_Opt_7(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_3_0_C_18(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_26(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_C_19(int const) {
    return const;
    }

int sample1_stateful_alu_3_0_Mux3_27(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_3_0_arith_op_7(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

|StateGroup| sample1_stateful_alu_3_0(ref |StateGroup| state_group, int pkt_1,int pkt_2,int pkt_3,int pkt_4,int pkt_5, int Mux3_0,int Mux3_1,int Mux3_10,int Mux3_11,int Mux3_12,int Mux3_13,int Mux3_14,int Mux3_15,int Mux3_16,int Mux3_17,int Mux3_18,int Mux3_19,int Mux3_2,int Mux3_20,int Mux3_21,int Mux3_22,int Mux3_23,int Mux3_24,int Mux3_25,int Mux3_26,int Mux3_27,int Mux3_3,int Mux3_4,int Mux3_5,int Mux3_6,int Mux3_7,int Mux3_8,int Mux3_9,int Opt_0,int Opt_1,int Opt_2,int Opt_3,int Opt_4,int Opt_5,int Opt_6,int Opt_7,int arith_op_0,int arith_op_1,int arith_op_2,int arith_op_3,int arith_op_4,int arith_op_5,int arith_op_6,int arith_op_7,int const_0,int const_1,int const_10,int const_11,int const_12,int const_13,int const_14,int const_15,int const_16,int const_17,int const_18,int const_19,int const_2,int const_3,int const_4,int const_5,int const_6,int const_7,int const_8,int const_9,int rel_op_0,int rel_op_1,int rel_op_2,int rel_op_3) {
 |StateGroup| old_state_group = state_group;
int state_0 = state_group.state_0;
int state_1 = state_group.state_1;if (sample1_stateful_alu_3_0_rel_op_0(sample1_stateful_alu_3_0_Mux3_0(state_0,state_1,Mux3_0)+sample1_stateful_alu_3_0_Mux3_1(pkt_1,pkt_2,Mux3_1)-sample1_stateful_alu_3_0_Mux3_2(pkt_1,pkt_2,Mux3_2),sample1_stateful_alu_3_0_C_0(const_0),rel_op_0)) {if (sample1_stateful_alu_3_0_rel_op_1(sample1_stateful_alu_3_0_Mux3_3(state_0,state_1,Mux3_3)+sample1_stateful_alu_3_0_Mux3_4(pkt_1,pkt_2,Mux3_4)-sample1_stateful_alu_3_0_Mux3_5(pkt_1,pkt_2,Mux3_5),sample1_stateful_alu_3_0_C_1(const_1),rel_op_1)) {state_0 = sample1_stateful_alu_3_0_Opt_0(state_0,Opt_0)+sample1_stateful_alu_3_0_arith_op_0(sample1_stateful_alu_3_0_Mux3_6(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_2(const_2),Mux3_6),sample1_stateful_alu_3_0_Mux3_7(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_3(const_3),Mux3_7),arith_op_0);state_1 = sample1_stateful_alu_3_0_Opt_1(state_1,Opt_1)+sample1_stateful_alu_3_0_arith_op_1(sample1_stateful_alu_3_0_Mux3_8(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_4(const_4),Mux3_8),sample1_stateful_alu_3_0_Mux3_9(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_5(const_5),Mux3_9),arith_op_1);}else {state_0 = sample1_stateful_alu_3_0_Opt_2(state_0,Opt_2)+sample1_stateful_alu_3_0_arith_op_2(sample1_stateful_alu_3_0_Mux3_10(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_6(const_6),Mux3_10),sample1_stateful_alu_3_0_Mux3_11(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_7(const_7),Mux3_11),arith_op_2);state_1 = sample1_stateful_alu_3_0_Opt_3(state_1,Opt_3)+sample1_stateful_alu_3_0_arith_op_3(sample1_stateful_alu_3_0_Mux3_12(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_8(const_8),Mux3_12),sample1_stateful_alu_3_0_Mux3_13(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_9(const_9),Mux3_13),arith_op_3);}}else if (sample1_stateful_alu_3_0_rel_op_2(sample1_stateful_alu_3_0_Mux3_14(state_0,state_1,Mux3_14)+sample1_stateful_alu_3_0_Mux3_15(pkt_1,pkt_2,Mux3_15)-sample1_stateful_alu_3_0_Mux3_16(pkt_1,pkt_2,Mux3_16),sample1_stateful_alu_3_0_C_10(const_10),rel_op_2)) {if (sample1_stateful_alu_3_0_rel_op_3(sample1_stateful_alu_3_0_Mux3_17(state_0,state_1,Mux3_17)+sample1_stateful_alu_3_0_Mux3_18(pkt_1,pkt_2,Mux3_18)-sample1_stateful_alu_3_0_Mux3_19(pkt_1,pkt_2,Mux3_19),sample1_stateful_alu_3_0_C_11(const_11),rel_op_3)) {state_0 = sample1_stateful_alu_3_0_Opt_4(state_0,Opt_4)+sample1_stateful_alu_3_0_arith_op_4(sample1_stateful_alu_3_0_Mux3_20(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_12(const_12),Mux3_20),sample1_stateful_alu_3_0_Mux3_21(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_13(const_13),Mux3_21),arith_op_4);state_1 = sample1_stateful_alu_3_0_Opt_5(state_1,Opt_5)+sample1_stateful_alu_3_0_arith_op_5(sample1_stateful_alu_3_0_Mux3_22(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_14(const_14),Mux3_22),sample1_stateful_alu_3_0_Mux3_23(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_15(const_15),Mux3_23),arith_op_5);}else {state_0 = sample1_stateful_alu_3_0_Opt_6(state_0,Opt_6)+sample1_stateful_alu_3_0_arith_op_6(sample1_stateful_alu_3_0_Mux3_24(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_16(const_16),Mux3_24),sample1_stateful_alu_3_0_Mux3_25(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_17(const_17),Mux3_25),arith_op_6);state_1 = sample1_stateful_alu_3_0_Opt_7(state_1,Opt_7)+sample1_stateful_alu_3_0_arith_op_7(sample1_stateful_alu_3_0_Mux3_26(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_18(const_18),Mux3_26),sample1_stateful_alu_3_0_Mux3_27(pkt_1,pkt_2,sample1_stateful_alu_3_0_C_19(const_19),Mux3_27),arith_op_7);}}
state_group.state_0 = state_0;
state_group.state_1 = state_1;
; return old_state_group;
}
int sample1_stateless_alu_4_0_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_0_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_0_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_0_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_0_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_0_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_0(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_4_0_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_4_0_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_4_1_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_1_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_1_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_1_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_1_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_1_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_1(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_4_1_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_4_1_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_4_2_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_2_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_2_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_2_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_2_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_2_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_2(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_4_2_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_4_2_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_4_3_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_3_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_3_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_3_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_3_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_3_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_3(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_4_3_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_4_3_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}
int sample1_stateless_alu_4_4_mux1(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_4_mux1_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_4_mux1_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_4_mux2(int input0,int input1,int input2,int input3,int input4, int sample1_stateless_alu_4_4_mux2_ctrl_local) {
    int mux_ctrl = sample1_stateless_alu_4_4_mux2_ctrl_local;
    if (mux_ctrl == 0) {
      return input0;
    }

      else if (mux_ctrl == 1) {
        return input1;
      }
      else if (mux_ctrl == 2) {
        return input2;
      }
      else if (mux_ctrl == 3) {
        return input3;
      }

    else { return input4; }
}int sample1_stateless_alu_4_4(int input0,int input1,int input2,int input3,int input4, int opcode_hole_local, int immediate_operand_hole_local, int mux1_ctrl_hole_local, int mux2_ctrl_hole_local) {
  int opcode = opcode_hole_local;
  int immediate_operand = immediate_operand_hole_local;

  int x = sample1_stateless_alu_4_4_mux1(input0,input1,input2,input3,input4, mux1_ctrl_hole_local);
  int y = sample1_stateless_alu_4_4_mux2(input0,input1,input2,input3,input4, mux2_ctrl_hole_local);

  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return x + y;
  } else if (opcode == 2) {
    return x + immediate_operand;
  } else if (opcode == 3) {
    return x - y;
  } else if (opcode == 4) {
    return x - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - x;
  } else if (opcode == 6) {
    return (x != 0) || (y != 0);
  } else if (opcode == 7) {
    return (x != 0) || (immediate_operand != 0);
  } else if (opcode == 8) {
    return (x != 0) && (y != 0);
  } else if (opcode == 9) {
    return (x != 0) && (immediate_operand != 0);
  } else if (opcode == 10) {
    return ! (x != 0);
  } else if (opcode == 11) {
    return x != y;
  } else if (opcode == 12) {
    return x != immediate_operand;
  } else if (opcode == 13) {
    return x == y;
  } else if (opcode == 14) {
    return x == immediate_operand;
  } else if (opcode == 15) {
    return x >= y;
  } else if (opcode == 16) {
    return x >= immediate_operand;
  } else if (opcode == 17) {
    return x < y;
  } else {
    return x < immediate_operand;
  }
}



int sample1_stateful_alu_4_0_Mux3_0(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_1(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_2(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_C_0(int const) {
    return const;
    }

bit sample1_stateful_alu_4_0_rel_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_4_0_Mux3_3(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_4(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_5(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_C_1(int const) {
    return const;
    }

bit sample1_stateful_alu_4_0_rel_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_4_0_Opt_0(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_2(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_6(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_3(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_7(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_0(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Opt_1(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_4(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_8(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_5(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_9(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_1(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Opt_2(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_6(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_10(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_7(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_11(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Opt_3(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_8(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_12(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_9(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_13(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Mux3_14(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_15(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_16(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_C_10(int const) {
    return const;
    }

bit sample1_stateful_alu_4_0_rel_op_2(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_4_0_Mux3_17(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_18(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_Mux3_19(int op1, int op2, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return 0;
}

int sample1_stateful_alu_4_0_C_11(int const) {
    return const;
    }

bit sample1_stateful_alu_4_0_rel_op_3(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 != operand2;
    } else if (opcode == 1) {
      return operand1 < operand2;
    } else if (opcode == 2) {
      return operand1 > operand2;
    } else {
      assert(opcode == 3);
      return operand1 == operand2;
    }
    } 

int sample1_stateful_alu_4_0_Opt_4(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_12(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_20(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_13(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_21(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_4(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Opt_5(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_14(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_22(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_15(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_23(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_5(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Opt_6(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_16(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_24(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_17(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_25(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_6(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

int sample1_stateful_alu_4_0_Opt_7(int op1, int enable) {
    if (enable != 0) return 0;
    return op1;
    } 

int sample1_stateful_alu_4_0_C_18(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_26(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_C_19(int const) {
    return const;
    }

int sample1_stateful_alu_4_0_Mux3_27(int op1, int op2, int op3, int choice) {
    if (choice == 0) return op1;
    else if (choice == 1) return op2;
    else return op3;
    } 

int sample1_stateful_alu_4_0_arith_op_7(int operand1, int operand2, int opcode) {
    if (opcode == 0) {
      return operand1 + operand2;
    } else {
      return operand1 - operand2;
    }
    }

|StateGroup| sample1_stateful_alu_4_0(ref |StateGroup| state_group, int pkt_1,int pkt_2,int pkt_3,int pkt_4,int pkt_5, int Mux3_0,int Mux3_1,int Mux3_10,int Mux3_11,int Mux3_12,int Mux3_13,int Mux3_14,int Mux3_15,int Mux3_16,int Mux3_17,int Mux3_18,int Mux3_19,int Mux3_2,int Mux3_20,int Mux3_21,int Mux3_22,int Mux3_23,int Mux3_24,int Mux3_25,int Mux3_26,int Mux3_27,int Mux3_3,int Mux3_4,int Mux3_5,int Mux3_6,int Mux3_7,int Mux3_8,int Mux3_9,int Opt_0,int Opt_1,int Opt_2,int Opt_3,int Opt_4,int Opt_5,int Opt_6,int Opt_7,int arith_op_0,int arith_op_1,int arith_op_2,int arith_op_3,int arith_op_4,int arith_op_5,int arith_op_6,int arith_op_7,int const_0,int const_1,int const_10,int const_11,int const_12,int const_13,int const_14,int const_15,int const_16,int const_17,int const_18,int const_19,int const_2,int const_3,int const_4,int const_5,int const_6,int const_7,int const_8,int const_9,int rel_op_0,int rel_op_1,int rel_op_2,int rel_op_3) {
 |StateGroup| old_state_group = state_group;
int state_0 = state_group.state_0;
int state_1 = state_group.state_1;if (sample1_stateful_alu_4_0_rel_op_0(sample1_stateful_alu_4_0_Mux3_0(state_0,state_1,Mux3_0)+sample1_stateful_alu_4_0_Mux3_1(pkt_1,pkt_2,Mux3_1)-sample1_stateful_alu_4_0_Mux3_2(pkt_1,pkt_2,Mux3_2),sample1_stateful_alu_4_0_C_0(const_0),rel_op_0)) {if (sample1_stateful_alu_4_0_rel_op_1(sample1_stateful_alu_4_0_Mux3_3(state_0,state_1,Mux3_3)+sample1_stateful_alu_4_0_Mux3_4(pkt_1,pkt_2,Mux3_4)-sample1_stateful_alu_4_0_Mux3_5(pkt_1,pkt_2,Mux3_5),sample1_stateful_alu_4_0_C_1(const_1),rel_op_1)) {state_0 = sample1_stateful_alu_4_0_Opt_0(state_0,Opt_0)+sample1_stateful_alu_4_0_arith_op_0(sample1_stateful_alu_4_0_Mux3_6(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_2(const_2),Mux3_6),sample1_stateful_alu_4_0_Mux3_7(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_3(const_3),Mux3_7),arith_op_0);state_1 = sample1_stateful_alu_4_0_Opt_1(state_1,Opt_1)+sample1_stateful_alu_4_0_arith_op_1(sample1_stateful_alu_4_0_Mux3_8(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_4(const_4),Mux3_8),sample1_stateful_alu_4_0_Mux3_9(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_5(const_5),Mux3_9),arith_op_1);}else {state_0 = sample1_stateful_alu_4_0_Opt_2(state_0,Opt_2)+sample1_stateful_alu_4_0_arith_op_2(sample1_stateful_alu_4_0_Mux3_10(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_6(const_6),Mux3_10),sample1_stateful_alu_4_0_Mux3_11(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_7(const_7),Mux3_11),arith_op_2);state_1 = sample1_stateful_alu_4_0_Opt_3(state_1,Opt_3)+sample1_stateful_alu_4_0_arith_op_3(sample1_stateful_alu_4_0_Mux3_12(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_8(const_8),Mux3_12),sample1_stateful_alu_4_0_Mux3_13(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_9(const_9),Mux3_13),arith_op_3);}}else if (sample1_stateful_alu_4_0_rel_op_2(sample1_stateful_alu_4_0_Mux3_14(state_0,state_1,Mux3_14)+sample1_stateful_alu_4_0_Mux3_15(pkt_1,pkt_2,Mux3_15)-sample1_stateful_alu_4_0_Mux3_16(pkt_1,pkt_2,Mux3_16),sample1_stateful_alu_4_0_C_10(const_10),rel_op_2)) {if (sample1_stateful_alu_4_0_rel_op_3(sample1_stateful_alu_4_0_Mux3_17(state_0,state_1,Mux3_17)+sample1_stateful_alu_4_0_Mux3_18(pkt_1,pkt_2,Mux3_18)-sample1_stateful_alu_4_0_Mux3_19(pkt_1,pkt_2,Mux3_19),sample1_stateful_alu_4_0_C_11(const_11),rel_op_3)) {state_0 = sample1_stateful_alu_4_0_Opt_4(state_0,Opt_4)+sample1_stateful_alu_4_0_arith_op_4(sample1_stateful_alu_4_0_Mux3_20(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_12(const_12),Mux3_20),sample1_stateful_alu_4_0_Mux3_21(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_13(const_13),Mux3_21),arith_op_4);state_1 = sample1_stateful_alu_4_0_Opt_5(state_1,Opt_5)+sample1_stateful_alu_4_0_arith_op_5(sample1_stateful_alu_4_0_Mux3_22(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_14(const_14),Mux3_22),sample1_stateful_alu_4_0_Mux3_23(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_15(const_15),Mux3_23),arith_op_5);}else {state_0 = sample1_stateful_alu_4_0_Opt_6(state_0,Opt_6)+sample1_stateful_alu_4_0_arith_op_6(sample1_stateful_alu_4_0_Mux3_24(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_16(const_16),Mux3_24),sample1_stateful_alu_4_0_Mux3_25(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_17(const_17),Mux3_25),arith_op_6);state_1 = sample1_stateful_alu_4_0_Opt_7(state_1,Opt_7)+sample1_stateful_alu_4_0_arith_op_7(sample1_stateful_alu_4_0_Mux3_26(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_18(const_18),Mux3_26),sample1_stateful_alu_4_0_Mux3_27(pkt_1,pkt_2,sample1_stateful_alu_4_0_C_19(const_19),Mux3_27),arith_op_7);}}
state_group.state_0 = state_0;
state_group.state_1 = state_1;
; return old_state_group;
}

struct StateGroup {
    int state_0;
    int state_1;
}

// Data type for holding result from spec and implementation
struct StateAndPacket {
    int pkt_0;
      int state_group_0_state_0;
      int state_group_0_state_1;
}

// Specification
// Spec for Sketch
|StateAndPacket| program (|StateAndPacket| state_and_packet) {
  state_and_packet.pkt_0 = 1 + state_and_packet.state_group_0_state_0;
  return state_and_packet;
}


// Implementation
  |StateAndPacket| pipeline (|StateAndPacket| state_and_packet) {
  // Consolidate all constraints on holes here.
  assert((sample1_stateless_alu_0_0_opcode == 1)|| (sample1_stateless_alu_0_0_mux1_ctrl <= sample1_stateless_alu_0_0_mux2_ctrl));
assert((sample1_stateless_alu_0_1_opcode == 1)|| (sample1_stateless_alu_0_1_mux1_ctrl <= sample1_stateless_alu_0_1_mux2_ctrl));
assert((sample1_stateless_alu_0_2_opcode == 1)|| (sample1_stateless_alu_0_2_mux1_ctrl <= sample1_stateless_alu_0_2_mux2_ctrl));
assert((sample1_stateless_alu_0_3_opcode == 1)|| (sample1_stateless_alu_0_3_mux1_ctrl <= sample1_stateless_alu_0_3_mux2_ctrl));
assert((sample1_stateless_alu_0_4_opcode == 1)|| (sample1_stateless_alu_0_4_mux1_ctrl <= sample1_stateless_alu_0_4_mux2_ctrl));
assert((sample1_stateless_alu_1_0_opcode == 1)|| (sample1_stateless_alu_1_0_mux1_ctrl <= sample1_stateless_alu_1_0_mux2_ctrl));
assert((sample1_stateless_alu_1_1_opcode == 1)|| (sample1_stateless_alu_1_1_mux1_ctrl <= sample1_stateless_alu_1_1_mux2_ctrl));
assert((sample1_stateless_alu_1_2_opcode == 1)|| (sample1_stateless_alu_1_2_mux1_ctrl <= sample1_stateless_alu_1_2_mux2_ctrl));
assert((sample1_stateless_alu_1_3_opcode == 1)|| (sample1_stateless_alu_1_3_mux1_ctrl <= sample1_stateless_alu_1_3_mux2_ctrl));
assert((sample1_stateless_alu_1_4_opcode == 1)|| (sample1_stateless_alu_1_4_mux1_ctrl <= sample1_stateless_alu_1_4_mux2_ctrl));
assert((sample1_stateless_alu_2_0_opcode == 1)|| (sample1_stateless_alu_2_0_mux1_ctrl <= sample1_stateless_alu_2_0_mux2_ctrl));
assert((sample1_stateless_alu_2_1_opcode == 1)|| (sample1_stateless_alu_2_1_mux1_ctrl <= sample1_stateless_alu_2_1_mux2_ctrl));
assert((sample1_stateless_alu_2_2_opcode == 1)|| (sample1_stateless_alu_2_2_mux1_ctrl <= sample1_stateless_alu_2_2_mux2_ctrl));
assert((sample1_stateless_alu_2_3_opcode == 1)|| (sample1_stateless_alu_2_3_mux1_ctrl <= sample1_stateless_alu_2_3_mux2_ctrl));
assert((sample1_stateless_alu_2_4_opcode == 1)|| (sample1_stateless_alu_2_4_mux1_ctrl <= sample1_stateless_alu_2_4_mux2_ctrl));
assert((sample1_stateless_alu_3_0_opcode == 1)|| (sample1_stateless_alu_3_0_mux1_ctrl <= sample1_stateless_alu_3_0_mux2_ctrl));
assert((sample1_stateless_alu_3_1_opcode == 1)|| (sample1_stateless_alu_3_1_mux1_ctrl <= sample1_stateless_alu_3_1_mux2_ctrl));
assert((sample1_stateless_alu_3_2_opcode == 1)|| (sample1_stateless_alu_3_2_mux1_ctrl <= sample1_stateless_alu_3_2_mux2_ctrl));
assert((sample1_stateless_alu_3_3_opcode == 1)|| (sample1_stateless_alu_3_3_mux1_ctrl <= sample1_stateless_alu_3_3_mux2_ctrl));
assert((sample1_stateless_alu_3_4_opcode == 1)|| (sample1_stateless_alu_3_4_mux1_ctrl <= sample1_stateless_alu_3_4_mux2_ctrl));
assert((sample1_stateless_alu_4_0_opcode == 1)|| (sample1_stateless_alu_4_0_mux1_ctrl <= sample1_stateless_alu_4_0_mux2_ctrl));
assert((sample1_stateless_alu_4_1_opcode == 1)|| (sample1_stateless_alu_4_1_mux1_ctrl <= sample1_stateless_alu_4_1_mux2_ctrl));
assert((sample1_stateless_alu_4_2_opcode == 1)|| (sample1_stateless_alu_4_2_mux1_ctrl <= sample1_stateless_alu_4_2_mux2_ctrl));
assert((sample1_stateless_alu_4_3_opcode == 1)|| (sample1_stateless_alu_4_3_mux1_ctrl <= sample1_stateless_alu_4_3_mux2_ctrl));
assert((sample1_stateless_alu_4_4_opcode == 1)|| (sample1_stateless_alu_4_4_mux1_ctrl <= sample1_stateless_alu_4_4_mux2_ctrl));
assert((sample1_salu_config_0_0 + 0) <= 5);
assert((sample1_salu_config_1_0 + 0) <= 5);
assert((sample1_salu_config_2_0 + 0) <= 5);
assert((sample1_salu_config_3_0 + 0) <= 5);
assert((sample1_salu_config_4_0 + 0) <= 5);
assert((sample1_salu_config_0_0 + sample1_salu_config_1_0 + sample1_salu_config_2_0 + sample1_salu_config_3_0 + sample1_salu_config_4_0 + 0) <= 1);


  // One variable for each container in the PHV
  // Container i will be allocated to packet field i from the spec.
    int input_0_0 = 0;
    int input_0_1 = 0;
    int input_0_2 = 0;
    int input_0_3 = 0;
    int input_0_4 = 0;

  // One variable for each stateful ALU's state operand
  // This will be allocated to a state variable from the program using indicator variables.
      |StateGroup| state_operand_salu_0_0;
      |StateGroup| state_operand_salu_1_0;
      |StateGroup| state_operand_salu_2_0;
      |StateGroup| state_operand_salu_3_0;
      |StateGroup| state_operand_salu_4_0;

    /*********** Stage 0 *********/

    // Inputs
      // Read each PHV container from corresponding packet field.
        input_0_0 = state_and_packet.pkt_0;


    // Stateless ALUs
      int destination_0_0 = sample1_stateless_alu_0_0(
          input_0_0,
          input_0_1,
          input_0_2,
          input_0_3,
          input_0_4
,
      sample1_stateless_alu_0_0_opcode,
      sample1_stateless_alu_0_0_immediate,
      sample1_stateless_alu_0_0_mux1_ctrl,
      sample1_stateless_alu_0_0_mux2_ctrl
      );
      int destination_0_1 = sample1_stateless_alu_0_1(
          input_0_0,
          input_0_1,
          input_0_2,
          input_0_3,
          input_0_4
,
      sample1_stateless_alu_0_1_opcode,
      sample1_stateless_alu_0_1_immediate,
      sample1_stateless_alu_0_1_mux1_ctrl,
      sample1_stateless_alu_0_1_mux2_ctrl
      );
      int destination_0_2 = sample1_stateless_alu_0_2(
          input_0_0,
          input_0_1,
          input_0_2,
          input_0_3,
          input_0_4
,
      sample1_stateless_alu_0_2_opcode,
      sample1_stateless_alu_0_2_immediate,
      sample1_stateless_alu_0_2_mux1_ctrl,
      sample1_stateless_alu_0_2_mux2_ctrl
      );
      int destination_0_3 = sample1_stateless_alu_0_3(
          input_0_0,
          input_0_1,
          input_0_2,
          input_0_3,
          input_0_4
,
      sample1_stateless_alu_0_3_opcode,
      sample1_stateless_alu_0_3_immediate,
      sample1_stateless_alu_0_3_mux1_ctrl,
      sample1_stateless_alu_0_3_mux2_ctrl
      );
      int destination_0_4 = sample1_stateless_alu_0_4(
          input_0_0,
          input_0_1,
          input_0_2,
          input_0_3,
          input_0_4
,
      sample1_stateless_alu_0_4_opcode,
      sample1_stateless_alu_0_4_immediate,
      sample1_stateless_alu_0_4_mux1_ctrl,
      sample1_stateless_alu_0_4_mux2_ctrl
      );
  
    // Stateful operands
        int packet_operand_salu0_0_0 = sample1_stateful_operand_mux_0_0_0(
            input_0_0,
            input_0_1,
            input_0_2,
            input_0_3,
            input_0_4
      , sample1_stateful_operand_mux_0_0_0_ctrl);
        int packet_operand_salu0_0_1 = sample1_stateful_operand_mux_0_0_1(
            input_0_0,
            input_0_1,
            input_0_2,
            input_0_3,
            input_0_4
      , sample1_stateful_operand_mux_0_0_1_ctrl);
        int packet_operand_salu0_0_2 = sample1_stateful_operand_mux_0_0_2(
            input_0_0,
            input_0_1,
            input_0_2,
            input_0_3,
            input_0_4
      , sample1_stateful_operand_mux_0_0_2_ctrl);
        int packet_operand_salu0_0_3 = sample1_stateful_operand_mux_0_0_3(
            input_0_0,
            input_0_1,
            input_0_2,
            input_0_3,
            input_0_4
      , sample1_stateful_operand_mux_0_0_3_ctrl);
        int packet_operand_salu0_0_4 = sample1_stateful_operand_mux_0_0_4(
            input_0_0,
            input_0_1,
            input_0_2,
            input_0_3,
            input_0_4
      , sample1_stateful_operand_mux_0_0_4_ctrl);
  
    // Read stateful ALU slots from allocated state vars.
        if (sample1_salu_config_0_0 == 1) {
          state_operand_salu_0_0 =
          |StateGroup|(                           state_0 = state_and_packet.state_group_0_state_0,
                           state_1 = state_and_packet.state_group_0_state_1
);}
  
    // Stateful ALUs
      |StateGroup| old_state_group_0_0 = sample1_stateful_alu_0_0(state_operand_salu_0_0,
        packet_operand_salu0_0_0,
        packet_operand_salu0_0_1,
        packet_operand_salu0_0_2,
        packet_operand_salu0_0_3,
        packet_operand_salu0_0_4,
      sample1_stateful_alu_0_0_Mux3_0_global,sample1_stateful_alu_0_0_Mux3_1_global,sample1_stateful_alu_0_0_Mux3_10_global,sample1_stateful_alu_0_0_Mux3_11_global,sample1_stateful_alu_0_0_Mux3_12_global,sample1_stateful_alu_0_0_Mux3_13_global,sample1_stateful_alu_0_0_Mux3_14_global,sample1_stateful_alu_0_0_Mux3_15_global,sample1_stateful_alu_0_0_Mux3_16_global,sample1_stateful_alu_0_0_Mux3_17_global,sample1_stateful_alu_0_0_Mux3_18_global,sample1_stateful_alu_0_0_Mux3_19_global,sample1_stateful_alu_0_0_Mux3_2_global,sample1_stateful_alu_0_0_Mux3_20_global,sample1_stateful_alu_0_0_Mux3_21_global,sample1_stateful_alu_0_0_Mux3_22_global,sample1_stateful_alu_0_0_Mux3_23_global,sample1_stateful_alu_0_0_Mux3_24_global,sample1_stateful_alu_0_0_Mux3_25_global,sample1_stateful_alu_0_0_Mux3_26_global,sample1_stateful_alu_0_0_Mux3_27_global,sample1_stateful_alu_0_0_Mux3_3_global,sample1_stateful_alu_0_0_Mux3_4_global,sample1_stateful_alu_0_0_Mux3_5_global,sample1_stateful_alu_0_0_Mux3_6_global,sample1_stateful_alu_0_0_Mux3_7_global,sample1_stateful_alu_0_0_Mux3_8_global,sample1_stateful_alu_0_0_Mux3_9_global,sample1_stateful_alu_0_0_Opt_0_global,sample1_stateful_alu_0_0_Opt_1_global,sample1_stateful_alu_0_0_Opt_2_global,sample1_stateful_alu_0_0_Opt_3_global,sample1_stateful_alu_0_0_Opt_4_global,sample1_stateful_alu_0_0_Opt_5_global,sample1_stateful_alu_0_0_Opt_6_global,sample1_stateful_alu_0_0_Opt_7_global,sample1_stateful_alu_0_0_arith_op_0_global,sample1_stateful_alu_0_0_arith_op_1_global,sample1_stateful_alu_0_0_arith_op_2_global,sample1_stateful_alu_0_0_arith_op_3_global,sample1_stateful_alu_0_0_arith_op_4_global,sample1_stateful_alu_0_0_arith_op_5_global,sample1_stateful_alu_0_0_arith_op_6_global,sample1_stateful_alu_0_0_arith_op_7_global,sample1_stateful_alu_0_0_const_0_global,sample1_stateful_alu_0_0_const_1_global,sample1_stateful_alu_0_0_const_10_global,sample1_stateful_alu_0_0_const_11_global,sample1_stateful_alu_0_0_const_12_global,sample1_stateful_alu_0_0_const_13_global,sample1_stateful_alu_0_0_const_14_global,sample1_stateful_alu_0_0_const_15_global,sample1_stateful_alu_0_0_const_16_global,sample1_stateful_alu_0_0_const_17_global,sample1_stateful_alu_0_0_const_18_global,sample1_stateful_alu_0_0_const_19_global,sample1_stateful_alu_0_0_const_2_global,sample1_stateful_alu_0_0_const_3_global,sample1_stateful_alu_0_0_const_4_global,sample1_stateful_alu_0_0_const_5_global,sample1_stateful_alu_0_0_const_6_global,sample1_stateful_alu_0_0_const_7_global,sample1_stateful_alu_0_0_const_8_global,sample1_stateful_alu_0_0_const_9_global,sample1_stateful_alu_0_0_rel_op_0_global,sample1_stateful_alu_0_0_rel_op_1_global,sample1_stateful_alu_0_0_rel_op_2_global,sample1_stateful_alu_0_0_rel_op_3_global);
  
    // Outputs
      int output_0_0 = sample1_output_mux_phv_0_0(
          old_state_group_0_0.state_0,
          old_state_group_0_0.state_1,
      destination_0_0,
      sample1_output_mux_phv_0_0_ctrl
      );
      int output_0_1 = sample1_output_mux_phv_0_1(
          old_state_group_0_0.state_0,
          old_state_group_0_0.state_1,
      destination_0_1,
      sample1_output_mux_phv_0_1_ctrl
      );
      int output_0_2 = sample1_output_mux_phv_0_2(
          old_state_group_0_0.state_0,
          old_state_group_0_0.state_1,
      destination_0_2,
      sample1_output_mux_phv_0_2_ctrl
      );
      int output_0_3 = sample1_output_mux_phv_0_3(
          old_state_group_0_0.state_0,
          old_state_group_0_0.state_1,
      destination_0_3,
      sample1_output_mux_phv_0_3_ctrl
      );
      int output_0_4 = sample1_output_mux_phv_0_4(
          old_state_group_0_0.state_0,
          old_state_group_0_0.state_1,
      destination_0_4,
      sample1_output_mux_phv_0_4_ctrl
      );
  
      // Write state_0
        if (sample1_salu_config_0_0 == 1) {
          state_and_packet.state_group_0_state_0 = state_operand_salu_0_0.state_0;
          state_and_packet.state_group_0_state_1 = state_operand_salu_0_0.state_1;
        }

    /*********** Stage 1 *********/

    // Inputs
      // Input of this stage is the output of the previous one.
        int input_1_0 = output_0_0;
        int input_1_1 = output_0_1;
        int input_1_2 = output_0_2;
        int input_1_3 = output_0_3;
        int input_1_4 = output_0_4;


    // Stateless ALUs
      int destination_1_0 = sample1_stateless_alu_1_0(
          input_1_0,
          input_1_1,
          input_1_2,
          input_1_3,
          input_1_4
,
      sample1_stateless_alu_1_0_opcode,
      sample1_stateless_alu_1_0_immediate,
      sample1_stateless_alu_1_0_mux1_ctrl,
      sample1_stateless_alu_1_0_mux2_ctrl
      );
      int destination_1_1 = sample1_stateless_alu_1_1(
          input_1_0,
          input_1_1,
          input_1_2,
          input_1_3,
          input_1_4
,
      sample1_stateless_alu_1_1_opcode,
      sample1_stateless_alu_1_1_immediate,
      sample1_stateless_alu_1_1_mux1_ctrl,
      sample1_stateless_alu_1_1_mux2_ctrl
      );
      int destination_1_2 = sample1_stateless_alu_1_2(
          input_1_0,
          input_1_1,
          input_1_2,
          input_1_3,
          input_1_4
,
      sample1_stateless_alu_1_2_opcode,
      sample1_stateless_alu_1_2_immediate,
      sample1_stateless_alu_1_2_mux1_ctrl,
      sample1_stateless_alu_1_2_mux2_ctrl
      );
      int destination_1_3 = sample1_stateless_alu_1_3(
          input_1_0,
          input_1_1,
          input_1_2,
          input_1_3,
          input_1_4
,
      sample1_stateless_alu_1_3_opcode,
      sample1_stateless_alu_1_3_immediate,
      sample1_stateless_alu_1_3_mux1_ctrl,
      sample1_stateless_alu_1_3_mux2_ctrl
      );
      int destination_1_4 = sample1_stateless_alu_1_4(
          input_1_0,
          input_1_1,
          input_1_2,
          input_1_3,
          input_1_4
,
      sample1_stateless_alu_1_4_opcode,
      sample1_stateless_alu_1_4_immediate,
      sample1_stateless_alu_1_4_mux1_ctrl,
      sample1_stateless_alu_1_4_mux2_ctrl
      );
  
    // Stateful operands
        int packet_operand_salu1_0_0 = sample1_stateful_operand_mux_1_0_0(
            input_1_0,
            input_1_1,
            input_1_2,
            input_1_3,
            input_1_4
      , sample1_stateful_operand_mux_1_0_0_ctrl);
        int packet_operand_salu1_0_1 = sample1_stateful_operand_mux_1_0_1(
            input_1_0,
            input_1_1,
            input_1_2,
            input_1_3,
            input_1_4
      , sample1_stateful_operand_mux_1_0_1_ctrl);
        int packet_operand_salu1_0_2 = sample1_stateful_operand_mux_1_0_2(
            input_1_0,
            input_1_1,
            input_1_2,
            input_1_3,
            input_1_4
      , sample1_stateful_operand_mux_1_0_2_ctrl);
        int packet_operand_salu1_0_3 = sample1_stateful_operand_mux_1_0_3(
            input_1_0,
            input_1_1,
            input_1_2,
            input_1_3,
            input_1_4
      , sample1_stateful_operand_mux_1_0_3_ctrl);
        int packet_operand_salu1_0_4 = sample1_stateful_operand_mux_1_0_4(
            input_1_0,
            input_1_1,
            input_1_2,
            input_1_3,
            input_1_4
      , sample1_stateful_operand_mux_1_0_4_ctrl);
  
    // Read stateful ALU slots from allocated state vars.
        if (sample1_salu_config_1_0 == 1) {
          state_operand_salu_1_0 =
          |StateGroup|(                           state_0 = state_and_packet.state_group_0_state_0,
                           state_1 = state_and_packet.state_group_0_state_1
);}
  
    // Stateful ALUs
      |StateGroup| old_state_group_1_0 = sample1_stateful_alu_1_0(state_operand_salu_1_0,
        packet_operand_salu1_0_0,
        packet_operand_salu1_0_1,
        packet_operand_salu1_0_2,
        packet_operand_salu1_0_3,
        packet_operand_salu1_0_4,
      sample1_stateful_alu_1_0_Mux3_0_global,sample1_stateful_alu_1_0_Mux3_1_global,sample1_stateful_alu_1_0_Mux3_10_global,sample1_stateful_alu_1_0_Mux3_11_global,sample1_stateful_alu_1_0_Mux3_12_global,sample1_stateful_alu_1_0_Mux3_13_global,sample1_stateful_alu_1_0_Mux3_14_global,sample1_stateful_alu_1_0_Mux3_15_global,sample1_stateful_alu_1_0_Mux3_16_global,sample1_stateful_alu_1_0_Mux3_17_global,sample1_stateful_alu_1_0_Mux3_18_global,sample1_stateful_alu_1_0_Mux3_19_global,sample1_stateful_alu_1_0_Mux3_2_global,sample1_stateful_alu_1_0_Mux3_20_global,sample1_stateful_alu_1_0_Mux3_21_global,sample1_stateful_alu_1_0_Mux3_22_global,sample1_stateful_alu_1_0_Mux3_23_global,sample1_stateful_alu_1_0_Mux3_24_global,sample1_stateful_alu_1_0_Mux3_25_global,sample1_stateful_alu_1_0_Mux3_26_global,sample1_stateful_alu_1_0_Mux3_27_global,sample1_stateful_alu_1_0_Mux3_3_global,sample1_stateful_alu_1_0_Mux3_4_global,sample1_stateful_alu_1_0_Mux3_5_global,sample1_stateful_alu_1_0_Mux3_6_global,sample1_stateful_alu_1_0_Mux3_7_global,sample1_stateful_alu_1_0_Mux3_8_global,sample1_stateful_alu_1_0_Mux3_9_global,sample1_stateful_alu_1_0_Opt_0_global,sample1_stateful_alu_1_0_Opt_1_global,sample1_stateful_alu_1_0_Opt_2_global,sample1_stateful_alu_1_0_Opt_3_global,sample1_stateful_alu_1_0_Opt_4_global,sample1_stateful_alu_1_0_Opt_5_global,sample1_stateful_alu_1_0_Opt_6_global,sample1_stateful_alu_1_0_Opt_7_global,sample1_stateful_alu_1_0_arith_op_0_global,sample1_stateful_alu_1_0_arith_op_1_global,sample1_stateful_alu_1_0_arith_op_2_global,sample1_stateful_alu_1_0_arith_op_3_global,sample1_stateful_alu_1_0_arith_op_4_global,sample1_stateful_alu_1_0_arith_op_5_global,sample1_stateful_alu_1_0_arith_op_6_global,sample1_stateful_alu_1_0_arith_op_7_global,sample1_stateful_alu_1_0_const_0_global,sample1_stateful_alu_1_0_const_1_global,sample1_stateful_alu_1_0_const_10_global,sample1_stateful_alu_1_0_const_11_global,sample1_stateful_alu_1_0_const_12_global,sample1_stateful_alu_1_0_const_13_global,sample1_stateful_alu_1_0_const_14_global,sample1_stateful_alu_1_0_const_15_global,sample1_stateful_alu_1_0_const_16_global,sample1_stateful_alu_1_0_const_17_global,sample1_stateful_alu_1_0_const_18_global,sample1_stateful_alu_1_0_const_19_global,sample1_stateful_alu_1_0_const_2_global,sample1_stateful_alu_1_0_const_3_global,sample1_stateful_alu_1_0_const_4_global,sample1_stateful_alu_1_0_const_5_global,sample1_stateful_alu_1_0_const_6_global,sample1_stateful_alu_1_0_const_7_global,sample1_stateful_alu_1_0_const_8_global,sample1_stateful_alu_1_0_const_9_global,sample1_stateful_alu_1_0_rel_op_0_global,sample1_stateful_alu_1_0_rel_op_1_global,sample1_stateful_alu_1_0_rel_op_2_global,sample1_stateful_alu_1_0_rel_op_3_global);
  
    // Outputs
      int output_1_0 = sample1_output_mux_phv_1_0(
          old_state_group_1_0.state_0,
          old_state_group_1_0.state_1,
      destination_1_0,
      sample1_output_mux_phv_1_0_ctrl
      );
      int output_1_1 = sample1_output_mux_phv_1_1(
          old_state_group_1_0.state_0,
          old_state_group_1_0.state_1,
      destination_1_1,
      sample1_output_mux_phv_1_1_ctrl
      );
      int output_1_2 = sample1_output_mux_phv_1_2(
          old_state_group_1_0.state_0,
          old_state_group_1_0.state_1,
      destination_1_2,
      sample1_output_mux_phv_1_2_ctrl
      );
      int output_1_3 = sample1_output_mux_phv_1_3(
          old_state_group_1_0.state_0,
          old_state_group_1_0.state_1,
      destination_1_3,
      sample1_output_mux_phv_1_3_ctrl
      );
      int output_1_4 = sample1_output_mux_phv_1_4(
          old_state_group_1_0.state_0,
          old_state_group_1_0.state_1,
      destination_1_4,
      sample1_output_mux_phv_1_4_ctrl
      );
  
      // Write state_0
        if (sample1_salu_config_1_0 == 1) {
          state_and_packet.state_group_0_state_0 = state_operand_salu_1_0.state_0;
          state_and_packet.state_group_0_state_1 = state_operand_salu_1_0.state_1;
        }

    /*********** Stage 2 *********/

    // Inputs
      // Input of this stage is the output of the previous one.
        int input_2_0 = output_1_0;
        int input_2_1 = output_1_1;
        int input_2_2 = output_1_2;
        int input_2_3 = output_1_3;
        int input_2_4 = output_1_4;


    // Stateless ALUs
      int destination_2_0 = sample1_stateless_alu_2_0(
          input_2_0,
          input_2_1,
          input_2_2,
          input_2_3,
          input_2_4
,
      sample1_stateless_alu_2_0_opcode,
      sample1_stateless_alu_2_0_immediate,
      sample1_stateless_alu_2_0_mux1_ctrl,
      sample1_stateless_alu_2_0_mux2_ctrl
      );
      int destination_2_1 = sample1_stateless_alu_2_1(
          input_2_0,
          input_2_1,
          input_2_2,
          input_2_3,
          input_2_4
,
      sample1_stateless_alu_2_1_opcode,
      sample1_stateless_alu_2_1_immediate,
      sample1_stateless_alu_2_1_mux1_ctrl,
      sample1_stateless_alu_2_1_mux2_ctrl
      );
      int destination_2_2 = sample1_stateless_alu_2_2(
          input_2_0,
          input_2_1,
          input_2_2,
          input_2_3,
          input_2_4
,
      sample1_stateless_alu_2_2_opcode,
      sample1_stateless_alu_2_2_immediate,
      sample1_stateless_alu_2_2_mux1_ctrl,
      sample1_stateless_alu_2_2_mux2_ctrl
      );
      int destination_2_3 = sample1_stateless_alu_2_3(
          input_2_0,
          input_2_1,
          input_2_2,
          input_2_3,
          input_2_4
,
      sample1_stateless_alu_2_3_opcode,
      sample1_stateless_alu_2_3_immediate,
      sample1_stateless_alu_2_3_mux1_ctrl,
      sample1_stateless_alu_2_3_mux2_ctrl
      );
      int destination_2_4 = sample1_stateless_alu_2_4(
          input_2_0,
          input_2_1,
          input_2_2,
          input_2_3,
          input_2_4
,
      sample1_stateless_alu_2_4_opcode,
      sample1_stateless_alu_2_4_immediate,
      sample1_stateless_alu_2_4_mux1_ctrl,
      sample1_stateless_alu_2_4_mux2_ctrl
      );
  
    // Stateful operands
        int packet_operand_salu2_0_0 = sample1_stateful_operand_mux_2_0_0(
            input_2_0,
            input_2_1,
            input_2_2,
            input_2_3,
            input_2_4
      , sample1_stateful_operand_mux_2_0_0_ctrl);
        int packet_operand_salu2_0_1 = sample1_stateful_operand_mux_2_0_1(
            input_2_0,
            input_2_1,
            input_2_2,
            input_2_3,
            input_2_4
      , sample1_stateful_operand_mux_2_0_1_ctrl);
        int packet_operand_salu2_0_2 = sample1_stateful_operand_mux_2_0_2(
            input_2_0,
            input_2_1,
            input_2_2,
            input_2_3,
            input_2_4
      , sample1_stateful_operand_mux_2_0_2_ctrl);
        int packet_operand_salu2_0_3 = sample1_stateful_operand_mux_2_0_3(
            input_2_0,
            input_2_1,
            input_2_2,
            input_2_3,
            input_2_4
      , sample1_stateful_operand_mux_2_0_3_ctrl);
        int packet_operand_salu2_0_4 = sample1_stateful_operand_mux_2_0_4(
            input_2_0,
            input_2_1,
            input_2_2,
            input_2_3,
            input_2_4
      , sample1_stateful_operand_mux_2_0_4_ctrl);
  
    // Read stateful ALU slots from allocated state vars.
        if (sample1_salu_config_2_0 == 1) {
          state_operand_salu_2_0 =
          |StateGroup|(                           state_0 = state_and_packet.state_group_0_state_0,
                           state_1 = state_and_packet.state_group_0_state_1
);}
  
    // Stateful ALUs
      |StateGroup| old_state_group_2_0 = sample1_stateful_alu_2_0(state_operand_salu_2_0,
        packet_operand_salu2_0_0,
        packet_operand_salu2_0_1,
        packet_operand_salu2_0_2,
        packet_operand_salu2_0_3,
        packet_operand_salu2_0_4,
      sample1_stateful_alu_2_0_Mux3_0_global,sample1_stateful_alu_2_0_Mux3_1_global,sample1_stateful_alu_2_0_Mux3_10_global,sample1_stateful_alu_2_0_Mux3_11_global,sample1_stateful_alu_2_0_Mux3_12_global,sample1_stateful_alu_2_0_Mux3_13_global,sample1_stateful_alu_2_0_Mux3_14_global,sample1_stateful_alu_2_0_Mux3_15_global,sample1_stateful_alu_2_0_Mux3_16_global,sample1_stateful_alu_2_0_Mux3_17_global,sample1_stateful_alu_2_0_Mux3_18_global,sample1_stateful_alu_2_0_Mux3_19_global,sample1_stateful_alu_2_0_Mux3_2_global,sample1_stateful_alu_2_0_Mux3_20_global,sample1_stateful_alu_2_0_Mux3_21_global,sample1_stateful_alu_2_0_Mux3_22_global,sample1_stateful_alu_2_0_Mux3_23_global,sample1_stateful_alu_2_0_Mux3_24_global,sample1_stateful_alu_2_0_Mux3_25_global,sample1_stateful_alu_2_0_Mux3_26_global,sample1_stateful_alu_2_0_Mux3_27_global,sample1_stateful_alu_2_0_Mux3_3_global,sample1_stateful_alu_2_0_Mux3_4_global,sample1_stateful_alu_2_0_Mux3_5_global,sample1_stateful_alu_2_0_Mux3_6_global,sample1_stateful_alu_2_0_Mux3_7_global,sample1_stateful_alu_2_0_Mux3_8_global,sample1_stateful_alu_2_0_Mux3_9_global,sample1_stateful_alu_2_0_Opt_0_global,sample1_stateful_alu_2_0_Opt_1_global,sample1_stateful_alu_2_0_Opt_2_global,sample1_stateful_alu_2_0_Opt_3_global,sample1_stateful_alu_2_0_Opt_4_global,sample1_stateful_alu_2_0_Opt_5_global,sample1_stateful_alu_2_0_Opt_6_global,sample1_stateful_alu_2_0_Opt_7_global,sample1_stateful_alu_2_0_arith_op_0_global,sample1_stateful_alu_2_0_arith_op_1_global,sample1_stateful_alu_2_0_arith_op_2_global,sample1_stateful_alu_2_0_arith_op_3_global,sample1_stateful_alu_2_0_arith_op_4_global,sample1_stateful_alu_2_0_arith_op_5_global,sample1_stateful_alu_2_0_arith_op_6_global,sample1_stateful_alu_2_0_arith_op_7_global,sample1_stateful_alu_2_0_const_0_global,sample1_stateful_alu_2_0_const_1_global,sample1_stateful_alu_2_0_const_10_global,sample1_stateful_alu_2_0_const_11_global,sample1_stateful_alu_2_0_const_12_global,sample1_stateful_alu_2_0_const_13_global,sample1_stateful_alu_2_0_const_14_global,sample1_stateful_alu_2_0_const_15_global,sample1_stateful_alu_2_0_const_16_global,sample1_stateful_alu_2_0_const_17_global,sample1_stateful_alu_2_0_const_18_global,sample1_stateful_alu_2_0_const_19_global,sample1_stateful_alu_2_0_const_2_global,sample1_stateful_alu_2_0_const_3_global,sample1_stateful_alu_2_0_const_4_global,sample1_stateful_alu_2_0_const_5_global,sample1_stateful_alu_2_0_const_6_global,sample1_stateful_alu_2_0_const_7_global,sample1_stateful_alu_2_0_const_8_global,sample1_stateful_alu_2_0_const_9_global,sample1_stateful_alu_2_0_rel_op_0_global,sample1_stateful_alu_2_0_rel_op_1_global,sample1_stateful_alu_2_0_rel_op_2_global,sample1_stateful_alu_2_0_rel_op_3_global);
  
    // Outputs
      int output_2_0 = sample1_output_mux_phv_2_0(
          old_state_group_2_0.state_0,
          old_state_group_2_0.state_1,
      destination_2_0,
      sample1_output_mux_phv_2_0_ctrl
      );
      int output_2_1 = sample1_output_mux_phv_2_1(
          old_state_group_2_0.state_0,
          old_state_group_2_0.state_1,
      destination_2_1,
      sample1_output_mux_phv_2_1_ctrl
      );
      int output_2_2 = sample1_output_mux_phv_2_2(
          old_state_group_2_0.state_0,
          old_state_group_2_0.state_1,
      destination_2_2,
      sample1_output_mux_phv_2_2_ctrl
      );
      int output_2_3 = sample1_output_mux_phv_2_3(
          old_state_group_2_0.state_0,
          old_state_group_2_0.state_1,
      destination_2_3,
      sample1_output_mux_phv_2_3_ctrl
      );
      int output_2_4 = sample1_output_mux_phv_2_4(
          old_state_group_2_0.state_0,
          old_state_group_2_0.state_1,
      destination_2_4,
      sample1_output_mux_phv_2_4_ctrl
      );
  
      // Write state_0
        if (sample1_salu_config_2_0 == 1) {
          state_and_packet.state_group_0_state_0 = state_operand_salu_2_0.state_0;
          state_and_packet.state_group_0_state_1 = state_operand_salu_2_0.state_1;
        }

    /*********** Stage 3 *********/

    // Inputs
      // Input of this stage is the output of the previous one.
        int input_3_0 = output_2_0;
        int input_3_1 = output_2_1;
        int input_3_2 = output_2_2;
        int input_3_3 = output_2_3;
        int input_3_4 = output_2_4;


    // Stateless ALUs
      int destination_3_0 = sample1_stateless_alu_3_0(
          input_3_0,
          input_3_1,
          input_3_2,
          input_3_3,
          input_3_4
,
      sample1_stateless_alu_3_0_opcode,
      sample1_stateless_alu_3_0_immediate,
      sample1_stateless_alu_3_0_mux1_ctrl,
      sample1_stateless_alu_3_0_mux2_ctrl
      );
      int destination_3_1 = sample1_stateless_alu_3_1(
          input_3_0,
          input_3_1,
          input_3_2,
          input_3_3,
          input_3_4
,
      sample1_stateless_alu_3_1_opcode,
      sample1_stateless_alu_3_1_immediate,
      sample1_stateless_alu_3_1_mux1_ctrl,
      sample1_stateless_alu_3_1_mux2_ctrl
      );
      int destination_3_2 = sample1_stateless_alu_3_2(
          input_3_0,
          input_3_1,
          input_3_2,
          input_3_3,
          input_3_4
,
      sample1_stateless_alu_3_2_opcode,
      sample1_stateless_alu_3_2_immediate,
      sample1_stateless_alu_3_2_mux1_ctrl,
      sample1_stateless_alu_3_2_mux2_ctrl
      );
      int destination_3_3 = sample1_stateless_alu_3_3(
          input_3_0,
          input_3_1,
          input_3_2,
          input_3_3,
          input_3_4
,
      sample1_stateless_alu_3_3_opcode,
      sample1_stateless_alu_3_3_immediate,
      sample1_stateless_alu_3_3_mux1_ctrl,
      sample1_stateless_alu_3_3_mux2_ctrl
      );
      int destination_3_4 = sample1_stateless_alu_3_4(
          input_3_0,
          input_3_1,
          input_3_2,
          input_3_3,
          input_3_4
,
      sample1_stateless_alu_3_4_opcode,
      sample1_stateless_alu_3_4_immediate,
      sample1_stateless_alu_3_4_mux1_ctrl,
      sample1_stateless_alu_3_4_mux2_ctrl
      );
  
    // Stateful operands
        int packet_operand_salu3_0_0 = sample1_stateful_operand_mux_3_0_0(
            input_3_0,
            input_3_1,
            input_3_2,
            input_3_3,
            input_3_4
      , sample1_stateful_operand_mux_3_0_0_ctrl);
        int packet_operand_salu3_0_1 = sample1_stateful_operand_mux_3_0_1(
            input_3_0,
            input_3_1,
            input_3_2,
            input_3_3,
            input_3_4
      , sample1_stateful_operand_mux_3_0_1_ctrl);
        int packet_operand_salu3_0_2 = sample1_stateful_operand_mux_3_0_2(
            input_3_0,
            input_3_1,
            input_3_2,
            input_3_3,
            input_3_4
      , sample1_stateful_operand_mux_3_0_2_ctrl);
        int packet_operand_salu3_0_3 = sample1_stateful_operand_mux_3_0_3(
            input_3_0,
            input_3_1,
            input_3_2,
            input_3_3,
            input_3_4
      , sample1_stateful_operand_mux_3_0_3_ctrl);
        int packet_operand_salu3_0_4 = sample1_stateful_operand_mux_3_0_4(
            input_3_0,
            input_3_1,
            input_3_2,
            input_3_3,
            input_3_4
      , sample1_stateful_operand_mux_3_0_4_ctrl);
  
    // Read stateful ALU slots from allocated state vars.
        if (sample1_salu_config_3_0 == 1) {
          state_operand_salu_3_0 =
          |StateGroup|(                           state_0 = state_and_packet.state_group_0_state_0,
                           state_1 = state_and_packet.state_group_0_state_1
);}
  
    // Stateful ALUs
      |StateGroup| old_state_group_3_0 = sample1_stateful_alu_3_0(state_operand_salu_3_0,
        packet_operand_salu3_0_0,
        packet_operand_salu3_0_1,
        packet_operand_salu3_0_2,
        packet_operand_salu3_0_3,
        packet_operand_salu3_0_4,
      sample1_stateful_alu_3_0_Mux3_0_global,sample1_stateful_alu_3_0_Mux3_1_global,sample1_stateful_alu_3_0_Mux3_10_global,sample1_stateful_alu_3_0_Mux3_11_global,sample1_stateful_alu_3_0_Mux3_12_global,sample1_stateful_alu_3_0_Mux3_13_global,sample1_stateful_alu_3_0_Mux3_14_global,sample1_stateful_alu_3_0_Mux3_15_global,sample1_stateful_alu_3_0_Mux3_16_global,sample1_stateful_alu_3_0_Mux3_17_global,sample1_stateful_alu_3_0_Mux3_18_global,sample1_stateful_alu_3_0_Mux3_19_global,sample1_stateful_alu_3_0_Mux3_2_global,sample1_stateful_alu_3_0_Mux3_20_global,sample1_stateful_alu_3_0_Mux3_21_global,sample1_stateful_alu_3_0_Mux3_22_global,sample1_stateful_alu_3_0_Mux3_23_global,sample1_stateful_alu_3_0_Mux3_24_global,sample1_stateful_alu_3_0_Mux3_25_global,sample1_stateful_alu_3_0_Mux3_26_global,sample1_stateful_alu_3_0_Mux3_27_global,sample1_stateful_alu_3_0_Mux3_3_global,sample1_stateful_alu_3_0_Mux3_4_global,sample1_stateful_alu_3_0_Mux3_5_global,sample1_stateful_alu_3_0_Mux3_6_global,sample1_stateful_alu_3_0_Mux3_7_global,sample1_stateful_alu_3_0_Mux3_8_global,sample1_stateful_alu_3_0_Mux3_9_global,sample1_stateful_alu_3_0_Opt_0_global,sample1_stateful_alu_3_0_Opt_1_global,sample1_stateful_alu_3_0_Opt_2_global,sample1_stateful_alu_3_0_Opt_3_global,sample1_stateful_alu_3_0_Opt_4_global,sample1_stateful_alu_3_0_Opt_5_global,sample1_stateful_alu_3_0_Opt_6_global,sample1_stateful_alu_3_0_Opt_7_global,sample1_stateful_alu_3_0_arith_op_0_global,sample1_stateful_alu_3_0_arith_op_1_global,sample1_stateful_alu_3_0_arith_op_2_global,sample1_stateful_alu_3_0_arith_op_3_global,sample1_stateful_alu_3_0_arith_op_4_global,sample1_stateful_alu_3_0_arith_op_5_global,sample1_stateful_alu_3_0_arith_op_6_global,sample1_stateful_alu_3_0_arith_op_7_global,sample1_stateful_alu_3_0_const_0_global,sample1_stateful_alu_3_0_const_1_global,sample1_stateful_alu_3_0_const_10_global,sample1_stateful_alu_3_0_const_11_global,sample1_stateful_alu_3_0_const_12_global,sample1_stateful_alu_3_0_const_13_global,sample1_stateful_alu_3_0_const_14_global,sample1_stateful_alu_3_0_const_15_global,sample1_stateful_alu_3_0_const_16_global,sample1_stateful_alu_3_0_const_17_global,sample1_stateful_alu_3_0_const_18_global,sample1_stateful_alu_3_0_const_19_global,sample1_stateful_alu_3_0_const_2_global,sample1_stateful_alu_3_0_const_3_global,sample1_stateful_alu_3_0_const_4_global,sample1_stateful_alu_3_0_const_5_global,sample1_stateful_alu_3_0_const_6_global,sample1_stateful_alu_3_0_const_7_global,sample1_stateful_alu_3_0_const_8_global,sample1_stateful_alu_3_0_const_9_global,sample1_stateful_alu_3_0_rel_op_0_global,sample1_stateful_alu_3_0_rel_op_1_global,sample1_stateful_alu_3_0_rel_op_2_global,sample1_stateful_alu_3_0_rel_op_3_global);
  
    // Outputs
      int output_3_0 = sample1_output_mux_phv_3_0(
          old_state_group_3_0.state_0,
          old_state_group_3_0.state_1,
      destination_3_0,
      sample1_output_mux_phv_3_0_ctrl
      );
      int output_3_1 = sample1_output_mux_phv_3_1(
          old_state_group_3_0.state_0,
          old_state_group_3_0.state_1,
      destination_3_1,
      sample1_output_mux_phv_3_1_ctrl
      );
      int output_3_2 = sample1_output_mux_phv_3_2(
          old_state_group_3_0.state_0,
          old_state_group_3_0.state_1,
      destination_3_2,
      sample1_output_mux_phv_3_2_ctrl
      );
      int output_3_3 = sample1_output_mux_phv_3_3(
          old_state_group_3_0.state_0,
          old_state_group_3_0.state_1,
      destination_3_3,
      sample1_output_mux_phv_3_3_ctrl
      );
      int output_3_4 = sample1_output_mux_phv_3_4(
          old_state_group_3_0.state_0,
          old_state_group_3_0.state_1,
      destination_3_4,
      sample1_output_mux_phv_3_4_ctrl
      );
  
      // Write state_0
        if (sample1_salu_config_3_0 == 1) {
          state_and_packet.state_group_0_state_0 = state_operand_salu_3_0.state_0;
          state_and_packet.state_group_0_state_1 = state_operand_salu_3_0.state_1;
        }

    /*********** Stage 4 *********/

    // Inputs
      // Input of this stage is the output of the previous one.
        int input_4_0 = output_3_0;
        int input_4_1 = output_3_1;
        int input_4_2 = output_3_2;
        int input_4_3 = output_3_3;
        int input_4_4 = output_3_4;


    // Stateless ALUs
      int destination_4_0 = sample1_stateless_alu_4_0(
          input_4_0,
          input_4_1,
          input_4_2,
          input_4_3,
          input_4_4
,
      sample1_stateless_alu_4_0_opcode,
      sample1_stateless_alu_4_0_immediate,
      sample1_stateless_alu_4_0_mux1_ctrl,
      sample1_stateless_alu_4_0_mux2_ctrl
      );
      int destination_4_1 = sample1_stateless_alu_4_1(
          input_4_0,
          input_4_1,
          input_4_2,
          input_4_3,
          input_4_4
,
      sample1_stateless_alu_4_1_opcode,
      sample1_stateless_alu_4_1_immediate,
      sample1_stateless_alu_4_1_mux1_ctrl,
      sample1_stateless_alu_4_1_mux2_ctrl
      );
      int destination_4_2 = sample1_stateless_alu_4_2(
          input_4_0,
          input_4_1,
          input_4_2,
          input_4_3,
          input_4_4
,
      sample1_stateless_alu_4_2_opcode,
      sample1_stateless_alu_4_2_immediate,
      sample1_stateless_alu_4_2_mux1_ctrl,
      sample1_stateless_alu_4_2_mux2_ctrl
      );
      int destination_4_3 = sample1_stateless_alu_4_3(
          input_4_0,
          input_4_1,
          input_4_2,
          input_4_3,
          input_4_4
,
      sample1_stateless_alu_4_3_opcode,
      sample1_stateless_alu_4_3_immediate,
      sample1_stateless_alu_4_3_mux1_ctrl,
      sample1_stateless_alu_4_3_mux2_ctrl
      );
      int destination_4_4 = sample1_stateless_alu_4_4(
          input_4_0,
          input_4_1,
          input_4_2,
          input_4_3,
          input_4_4
,
      sample1_stateless_alu_4_4_opcode,
      sample1_stateless_alu_4_4_immediate,
      sample1_stateless_alu_4_4_mux1_ctrl,
      sample1_stateless_alu_4_4_mux2_ctrl
      );
  
    // Stateful operands
        int packet_operand_salu4_0_0 = sample1_stateful_operand_mux_4_0_0(
            input_4_0,
            input_4_1,
            input_4_2,
            input_4_3,
            input_4_4
      , sample1_stateful_operand_mux_4_0_0_ctrl);
        int packet_operand_salu4_0_1 = sample1_stateful_operand_mux_4_0_1(
            input_4_0,
            input_4_1,
            input_4_2,
            input_4_3,
            input_4_4
      , sample1_stateful_operand_mux_4_0_1_ctrl);
        int packet_operand_salu4_0_2 = sample1_stateful_operand_mux_4_0_2(
            input_4_0,
            input_4_1,
            input_4_2,
            input_4_3,
            input_4_4
      , sample1_stateful_operand_mux_4_0_2_ctrl);
        int packet_operand_salu4_0_3 = sample1_stateful_operand_mux_4_0_3(
            input_4_0,
            input_4_1,
            input_4_2,
            input_4_3,
            input_4_4
      , sample1_stateful_operand_mux_4_0_3_ctrl);
        int packet_operand_salu4_0_4 = sample1_stateful_operand_mux_4_0_4(
            input_4_0,
            input_4_1,
            input_4_2,
            input_4_3,
            input_4_4
      , sample1_stateful_operand_mux_4_0_4_ctrl);
  
    // Read stateful ALU slots from allocated state vars.
        if (sample1_salu_config_4_0 == 1) {
          state_operand_salu_4_0 =
          |StateGroup|(                           state_0 = state_and_packet.state_group_0_state_0,
                           state_1 = state_and_packet.state_group_0_state_1
);}
  
    // Stateful ALUs
      |StateGroup| old_state_group_4_0 = sample1_stateful_alu_4_0(state_operand_salu_4_0,
        packet_operand_salu4_0_0,
        packet_operand_salu4_0_1,
        packet_operand_salu4_0_2,
        packet_operand_salu4_0_3,
        packet_operand_salu4_0_4,
      sample1_stateful_alu_4_0_Mux3_0_global,sample1_stateful_alu_4_0_Mux3_1_global,sample1_stateful_alu_4_0_Mux3_10_global,sample1_stateful_alu_4_0_Mux3_11_global,sample1_stateful_alu_4_0_Mux3_12_global,sample1_stateful_alu_4_0_Mux3_13_global,sample1_stateful_alu_4_0_Mux3_14_global,sample1_stateful_alu_4_0_Mux3_15_global,sample1_stateful_alu_4_0_Mux3_16_global,sample1_stateful_alu_4_0_Mux3_17_global,sample1_stateful_alu_4_0_Mux3_18_global,sample1_stateful_alu_4_0_Mux3_19_global,sample1_stateful_alu_4_0_Mux3_2_global,sample1_stateful_alu_4_0_Mux3_20_global,sample1_stateful_alu_4_0_Mux3_21_global,sample1_stateful_alu_4_0_Mux3_22_global,sample1_stateful_alu_4_0_Mux3_23_global,sample1_stateful_alu_4_0_Mux3_24_global,sample1_stateful_alu_4_0_Mux3_25_global,sample1_stateful_alu_4_0_Mux3_26_global,sample1_stateful_alu_4_0_Mux3_27_global,sample1_stateful_alu_4_0_Mux3_3_global,sample1_stateful_alu_4_0_Mux3_4_global,sample1_stateful_alu_4_0_Mux3_5_global,sample1_stateful_alu_4_0_Mux3_6_global,sample1_stateful_alu_4_0_Mux3_7_global,sample1_stateful_alu_4_0_Mux3_8_global,sample1_stateful_alu_4_0_Mux3_9_global,sample1_stateful_alu_4_0_Opt_0_global,sample1_stateful_alu_4_0_Opt_1_global,sample1_stateful_alu_4_0_Opt_2_global,sample1_stateful_alu_4_0_Opt_3_global,sample1_stateful_alu_4_0_Opt_4_global,sample1_stateful_alu_4_0_Opt_5_global,sample1_stateful_alu_4_0_Opt_6_global,sample1_stateful_alu_4_0_Opt_7_global,sample1_stateful_alu_4_0_arith_op_0_global,sample1_stateful_alu_4_0_arith_op_1_global,sample1_stateful_alu_4_0_arith_op_2_global,sample1_stateful_alu_4_0_arith_op_3_global,sample1_stateful_alu_4_0_arith_op_4_global,sample1_stateful_alu_4_0_arith_op_5_global,sample1_stateful_alu_4_0_arith_op_6_global,sample1_stateful_alu_4_0_arith_op_7_global,sample1_stateful_alu_4_0_const_0_global,sample1_stateful_alu_4_0_const_1_global,sample1_stateful_alu_4_0_const_10_global,sample1_stateful_alu_4_0_const_11_global,sample1_stateful_alu_4_0_const_12_global,sample1_stateful_alu_4_0_const_13_global,sample1_stateful_alu_4_0_const_14_global,sample1_stateful_alu_4_0_const_15_global,sample1_stateful_alu_4_0_const_16_global,sample1_stateful_alu_4_0_const_17_global,sample1_stateful_alu_4_0_const_18_global,sample1_stateful_alu_4_0_const_19_global,sample1_stateful_alu_4_0_const_2_global,sample1_stateful_alu_4_0_const_3_global,sample1_stateful_alu_4_0_const_4_global,sample1_stateful_alu_4_0_const_5_global,sample1_stateful_alu_4_0_const_6_global,sample1_stateful_alu_4_0_const_7_global,sample1_stateful_alu_4_0_const_8_global,sample1_stateful_alu_4_0_const_9_global,sample1_stateful_alu_4_0_rel_op_0_global,sample1_stateful_alu_4_0_rel_op_1_global,sample1_stateful_alu_4_0_rel_op_2_global,sample1_stateful_alu_4_0_rel_op_3_global);
  
    // Outputs
      int output_4_0 = sample1_output_mux_phv_4_0(
          old_state_group_4_0.state_0,
          old_state_group_4_0.state_1,
      destination_4_0,
      sample1_output_mux_phv_4_0_ctrl
      );
      int output_4_1 = sample1_output_mux_phv_4_1(
          old_state_group_4_0.state_0,
          old_state_group_4_0.state_1,
      destination_4_1,
      sample1_output_mux_phv_4_1_ctrl
      );
      int output_4_2 = sample1_output_mux_phv_4_2(
          old_state_group_4_0.state_0,
          old_state_group_4_0.state_1,
      destination_4_2,
      sample1_output_mux_phv_4_2_ctrl
      );
      int output_4_3 = sample1_output_mux_phv_4_3(
          old_state_group_4_0.state_0,
          old_state_group_4_0.state_1,
      destination_4_3,
      sample1_output_mux_phv_4_3_ctrl
      );
      int output_4_4 = sample1_output_mux_phv_4_4(
          old_state_group_4_0.state_0,
          old_state_group_4_0.state_1,
      destination_4_4,
      sample1_output_mux_phv_4_4_ctrl
      );
  
      // Write state_0
        if (sample1_salu_config_4_0 == 1) {
          state_and_packet.state_group_0_state_0 = state_operand_salu_4_0.state_0;
          state_and_packet.state_group_0_state_1 = state_operand_salu_4_0.state_1;
        }


    // Write pkt_0
    state_and_packet.pkt_0 = output_4_0;

  // Return updated packet fields and state vars
  return state_and_packet;
}

  harness void main(
    int pkt_0
        , int state_group_0_state_0
        , int state_group_0_state_1
) {
  
    |StateAndPacket| x = |StateAndPacket|(      pkt_0 = pkt_0,
          state_group_0_state_0 = state_group_0_state_0,
          state_group_0_state_1 = state_group_0_state_1
);
  
  assert(pipeline(x) == program(x));
  }
